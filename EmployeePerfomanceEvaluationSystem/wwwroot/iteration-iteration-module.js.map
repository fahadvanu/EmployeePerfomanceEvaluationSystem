{"version":3,"sources":["./src/app/iteration/iteration-component.ts","./src/app/iteration/iteration-component.html","./src/app/iteration/iteration-module.ts","./src/app/shared/services/iteration/iteration-service.ts","./src/app/shared/models/iteration/create-iteration-request-model.ts","./src/app/shared/models/iteration/iteration-reponse-model.ts","./src/app/iteration/iteration-routing-module.ts"],"names":[],"mappings":"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","file":"iteration-iteration-module.js","sourcesContent":["import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { IterationService } from '../shared/services/iteration/iteration-service';\r\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\r\nimport { IterationResponseModel, IterationStatus } from '../shared/models/iteration/iteration-reponse-model';\r\nimport { CreateIterationRequestModel, CreateIterationRequestModelAPI } from '../shared/models/iteration/create-iteration-request-model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../confirm-modal-component/confirm-modal-component';\r\nimport { Constant } from '../shared/constant/constants';\r\n\r\n@Component({\r\n    templateUrl: './iteration-component.html',\r\n    styleUrls: ['./iteration-component.css']\r\n})\r\nexport class IterationComponent implements OnInit {\r\n\r\n    iterations: Array<IterationResponseModel> = new Array<IterationResponseModel>();\r\n    iterationsToDisplay: Array<IterationResponseModel> = new Array<IterationResponseModel>();\r\n    currentPage: number = 1;\r\n    itemsPerPage: number = 5;\r\n    searchTerm: string;\r\n    loading: boolean = false;\r\n    modalRef: BsModalRef;\r\n    iteration_model: CreateIterationRequestModel = new CreateIterationRequestModel();\r\n\r\n    constructor(private iterationService: IterationService,\r\n        private spinnerService: SpinnerService,\r\n        private toastrNotificationService: ToastrNotificationService,\r\n        private cdRef: ChangeDetectorRef,\r\n        private modalService: BsModalService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.resetVariables();\r\n        this.getIterationsFromDatabase();\r\n    }\r\n\r\n    resetVariables() {\r\n        this.searchTerm = '';\r\n    }\r\n\r\n    private getIterationsFromDatabase() {\r\n\r\n        this.loading = true;\r\n        this.spinnerService.updateMessage('Loading iterations.....');\r\n        this.spinnerService.busy();\r\n        this.iterationService.getIterations()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.iterations = IterationResponseModel.FormIterationModelArray(response);\r\n                    this.iterationsToDisplay = this.iterations.slice();\r\n                }\r\n               // console.log(this.iterations);\r\n                this.loading = false;\r\n                this.spinnerService.idle();\r\n            },\r\n            error => {\r\n\r\n                this.loading = false;\r\n                this.spinnerService.idle();\r\n                console.log('Exception occured while fetching iterations from Database');\r\n            });\r\n    }\r\n\r\n    createIteration(iterationForm: NgForm) {\r\n\r\n        if (iterationForm.valid && this.validStartAndEndDate()) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Are you sure you want to create new iteration?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Creating new iteration.....');\r\n                            this.spinnerService.busy();\r\n                            let request: CreateIterationRequestModelAPI = this.mapCreateIterationRequest();\r\n                            \r\n\r\n                            this.iterationService.addNewIteration(request)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    this.getIterationsAfterUpdate('New iteration created successfully');\r\n                                    iterationForm.reset();\r\n                                },\r\n                                error => {\r\n\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while creating new iteration');\r\n\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }       \r\n    }\r\n\r\n    private getIterationsAfterUpdate(message: string) {\r\n\r\n        this.iterationService.getIterations()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.iterations = IterationResponseModel.FormIterationModelArray(response);\r\n                    this.iterationsToDisplay = this.iterations.slice();\r\n                }\r\n\r\n                this.resetAfterDbOperation();\r\n                this.spinnerService.idle();\r\n                this.toastrNotificationService.success(message);\r\n            },\r\n            error => {\r\n\r\n                this.spinnerService.idle();\r\n                console.log('Exception occured getIterationsAfterUpdate()');\r\n           });\r\n    }\r\n\r\n    private mapCreateIterationRequest(): CreateIterationRequestModelAPI {\r\n\r\n        let request: CreateIterationRequestModelAPI = new CreateIterationRequestModelAPI();\r\n        request.title = this.iteration_model.title;\r\n        request.startDate = new Date(this.iteration_model.startDate.getTime() - (this.iteration_model.startDate.getTimezoneOffset() * 60000)).toJSON();\r\n        request.endDate = new Date(this.iteration_model.endDate.getTime() - (this.iteration_model.endDate.getTimezoneOffset() * 60000)).toJSON();\r\n\r\n        return request;\r\n    }\r\n\r\n    private validStartAndEndDate() {\r\n\r\n        if (this.iteration_model.startDate > this.iteration_model.endDate) {\r\n            this.toastrNotificationService.warning(\"Start date cannot be greater than end date\");\r\n            return false;\r\n        }\r\n\r\n        let months = this.monthDiff(this.iteration_model.startDate, this.iteration_model.endDate);\r\n        if (months != 6) {\r\n            this.toastrNotificationService.warning(\"Start date and end date should have difference of 6 months\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private monthDiff(d1, d2) {\r\n        let months;\r\n        months = (d2.getFullYear() - d1.getFullYear()) * 12;\r\n        months -= d1.getMonth();\r\n        months += d2.getMonth();\r\n        return months <= 0 ? 0 : months + 1;\r\n    }\r\n\r\n    pageChanged(event: any) {\r\n        this.currentPage = event.page;\r\n    }\r\n\r\n    searchIterations() {\r\n\r\n        if (this.searchTerm != '' && this.searchTerm != null && this.searchTerm != undefined) {\r\n\r\n            this.iterationsToDisplay = this.iterations.filter(r => r.title.toLocaleLowerCase()\r\n                                                      .indexOf(this.searchTerm.toLocaleLowerCase()) != -1);\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\r\n        }\r\n        else {\r\n\r\n            this.iterationsToDisplay = this.iterations.slice();\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    private resetAfterDbOperation() {\r\n        this.resetVariables();\r\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\r\n        this.iteration_model = new CreateIterationRequestModel();\r\n    }\r\n\r\n    getIterationStatus(status: number) {\r\n\r\n        if (status == IterationStatus.NOTACTIVE)\r\n            return Constant.NOTACTIVE;\r\n\r\n        if (status == IterationStatus.ACTIVE)\r\n            return Constant.ACTIVE_ITERATION;\r\n\r\n        if (status == IterationStatus.DELETED)\r\n            return Constant.DELETED;\r\n\r\n        if (status == IterationStatus.LOCKED)\r\n            return Constant.LOCKED;\r\n    }\r\n\r\n    deleteIteration(iteration: IterationResponseModel) {\r\n       \r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Are you sure you want to delete iteration?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Deleting iteration.....');\r\n                            this.spinnerService.busy();\r\n\r\n                            this.iterationService.deleteIteration(iteration.iterationId)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    this.getIterationsAfterUpdate('Iteration deleted successfully');\r\n   \r\n                                },\r\n                                error => {\r\n\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while creating deleting iteration');\r\n\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n            });            \r\n\r\n    }\r\n}","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-9 offset-2\">\r\n\r\n        <div class=\"title_iteration_management\">\r\n            <h3> Iterations Management </h3>\r\n        </div>\r\n\r\n        <div *ngIf=\"!loading\">\r\n            <form #iterationForm=\"ngForm\" novalidate>\r\n\r\n                <div class=\"row mt-3\">\r\n                    <div class=\"col-xs-9 col-9 add_controls\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"title\">Title</label>\r\n                            <textarea class=\"form-control\"\r\n                                      name=\"title\" placeholder=\"Enter Title(max number of characters accepted are 200)\"\r\n                                      [(ngModel)]=\"iteration_model.title\"\r\n                                      #title=\"ngModel\"\r\n                                      required\r\n                                      maxlength=\"200\"\r\n                                      rows=\"3\"></textarea>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"startDate\">Iteration Start Date</label>\r\n                            <input class=\"form-control date_controls\" readonly\r\n                                   name=\"startDate\" placeholder=\"Select start date\"\r\n                                   [(ngModel)]=\"iteration_model.startDate\"\r\n                                   #startDate=\"ngModel\"\r\n                                   required\r\n                                   bsDatepicker\r\n                                   [bsConfig]=\"{ isAnimated: true, containerClass: 'theme-orange', \r\n                                                 showClearButton: true, clearPosition: 'right',\r\n                                                 dateInputFormat: 'DD/MM/YYYY'}\" />\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"endDate\">Iteration Start Date</label>\r\n                            <input class=\"form-control date_controls\"\r\n                                   name=\"endDate\" placeholder=\"Select end date\"\r\n                                   [(ngModel)]=\"iteration_model.endDate\"\r\n                                   #endDate=\"ngModel\"\r\n                                   required\r\n                                   bsDatepicker\r\n                                   [bsConfig]=\"{ isAnimated: true, containerClass: 'theme-orange',\r\n                                                 showClearButton: true, clearPosition: 'right',\r\n                                                 dateInputFormat: 'DD/MM/YYYY'}\" />\r\n                        </div>\r\n\r\n                        <div class=\"form-group button_controls\">\r\n\r\n                            <button type=\"submit\" class=\"btn btn-primary\"\r\n                                    (click)=\"createIteration(iterationForm)\"\r\n                                    [disabled]=\"iterationForm.invalid\">\r\n                                Submit\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n                        <div *ngIf=\"title.invalid && (title.dirty || title.touched)\"\r\n                             class=\"alert alert-danger\">\r\n\r\n                            <div *ngIf=\"title.errors.required\">\r\n                                Title is required.\r\n                            </div>\r\n                            <div *ngIf=\"title.errors.maxlength\">\r\n                                Title cannot exceeds 200 characters.\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"startDate.invalid && (startDate.dirty || startDate.touched)\"\r\n                             class=\"alert alert-danger\">\r\n\r\n                            <div *ngIf=\"startDate.errors.required\">\r\n                                Startdate is required.\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"endDate.invalid && (endDate.dirty || endDate.touched)\"\r\n                             class=\"alert alert-danger\">\r\n\r\n                            <div *ngIf=\"endDate.errors.required\">\r\n                                Title is required.\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"input-group col-md-4 iteration_search_control\">\r\n                    <input class=\"form-control\" placeholder=\"search by title\"\r\n                           value=\"search\" name=\"search-input\"\r\n                           [(ngModel)]=\"searchTerm\">\r\n                    <span class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"searchIterations()\">\r\n                            <i class=\"fa fa-search\"></i>\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n\r\n                <div class=\"row table_container_row\">\r\n                    <div class=\"col-md-12 table_container_column\">\r\n\r\n                        <table name=\"iterationTable\" class=\"table table-bordered table-hover iteration_table\" \r\n                               *ngIf=\"iterationsToDisplay.length > 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Title</th>\r\n                                    <th scope=\"col\">Duration</th>\r\n                                    <th scope=\"col\">Created Date</th>\r\n                                    <th scope=\"col\">Activated Date</th>\r\n                                    <th scope=\"col\">Locked Date</th>\r\n                                    <th scope=\"col\">Status</th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let iteration of (iterationsToDisplay | paginationPipe:currentPage:itemsPerPage)\" class=\"table-style\">\r\n                                    <th scope=\"row\"> {{ iteration.title }}</th>\r\n                                    <th scope=\"row\"> {{ iteration.startDate }} - {{ iteration.endDate }}</th>\r\n                                    <th scope=\"row\"> {{ iteration.createdDate }}</th>\r\n                                    <th scope=\"row\"> {{ iteration.activatedDate }}</th>\r\n                                    <th scope=\"row\"> {{ iteration.lockedDate }}</th>\r\n                                    <th scope=\"row\"> {{ getIterationStatus(iteration.status) }}</th>\r\n                                  \r\n                                    <td class=\"iteration_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"deleteIteration(iteration)\">\r\n                                            <span class=\"fa fa-trash-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table name=\"noiterationsTable\" class=\"table table-bordered table-hover mt-5 iteration_table\" \r\n                               *ngIf=\"iterationsToDisplay.length == 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Title</th>\r\n                                    <th scope=\"col\">Duration</th>\r\n                                    <th scope=\"col\">Created Date</th>\r\n                                    <th scope=\"col\">Activated Date</th>\r\n                                    <th scope=\"col\">Locked Date</th>\r\n                                    <th scope=\"col\">Status</th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr class=\"table-style\">\r\n\r\n                                    <td class=\"iteration_table_controls\" colspan=\"7\">\r\n                                        No Records Found\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row\" *ngIf=\"iterationsToDisplay.length > 0\">\r\n                    <div class=\"col-xs-12 col-12 pager-div\">\r\n                        <pagination name=\"paginationControl\" (pageChanged)=\"pageChanged($event)\"\r\n                                    [totalItems]=\"iterationsToDisplay.length\"\r\n                                    [itemsPerPage]=\"itemsPerPage\"\r\n                                    [maxSize]=\"itemsPerPage\"\r\n                                    [(ngModel)]=\"currentPage\">\r\n\r\n                        </pagination>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../shared/shared-module';\r\nimport { IterationComponent } from './iteration-component';\r\nimport { IterationRoutingModule } from './iteration-routing-module';\r\nimport { NgxBootstrapModule } from '../ngx-bootstrap-module'\r\n\r\n@NgModule({\r\n    declarations: [\r\n        IterationComponent\r\n    ],\r\n    imports: [\r\n\r\n        SharedModule,\r\n        NgxBootstrapModule,\r\n        IterationRoutingModule\r\n    ]\r\n})\r\nexport class IterationModule {\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable } from 'rxjs';\r\nimport { CreateIterationRequestModelAPI } from '../../models/iteration/create-iteration-request-model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IterationService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getIterations(): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>('/api/iteration/get_iterations', {});\r\n    }\r\n\r\n    addNewIteration(iteration: CreateIterationRequestModelAPI): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>(`/api/iteration/new _iteration`, iteration, httpOptions);\r\n    }\r\n\r\n\r\n    deleteIteration(iterationId: number): Observable<ApiResponse> {\r\n        return this.http.delete<ApiResponse>(`/api/iteration/remove_iteration/${iterationId}`);\r\n    }\r\n}","export class CreateIterationRequestModel {\r\n    title: string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n}\r\n\r\nexport class CreateIterationRequestModelAPI {\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n}","export class IterationResponseModel {\r\n\r\n    iterationId: number;\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    status: IterationStatus;\r\n    createdDate: string;\r\n    activatedDate: string;\r\n    lockedDate: string;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    static FormIterationModelArray(response: any): Array<IterationResponseModel> {\r\n\r\n        var iterationArray: Array<IterationResponseModel> = new Array<IterationResponseModel>();\r\n        for (var data of response.data) {\r\n            var iteration = new IterationResponseModel();\r\n            iteration.iterationId = data.iterationId;\r\n            iteration.title = data.title;\r\n            iteration.startDate = data.startDate;\r\n            iteration.endDate = data.endDate;\r\n            iteration.status = data.status;\r\n            iteration.createdDate = data.createdDate;\r\n            iteration.activatedDate = data.activatedDate;\r\n            iteration.lockedDate = data.lockedDate;\r\n\r\n            iterationArray.push(iteration);\r\n        }\r\n\r\n        return iterationArray;\r\n    }\r\n}\r\n\r\nexport enum IterationStatus {\r\n    NOTACTIVE = 1,\r\n    ACTIVE = 2,\r\n    LOCKED = 3,\r\n    DELETED = 4\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { IterationComponent } from './iteration-component';\r\nimport { AuthGuardService } from '../shared/guards/check-user-authenticated-guard';\r\n\r\n\r\nconst iterationRoutes: Routes = [\r\n    { path: '', component: IterationComponent, canActivate: [AuthGuardService] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(iterationRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class IterationRoutingModule {\r\n\r\n}"],"sourceRoot":"webpack:///"}