{"version":3,"sources":["./src/app/accounts/need-help/need-help-module.ts","./src/app/shared/models/accounts/need-help/password-reset/password-reset-request-model.ts","./src/app/accounts/need-help/password-reset/password-reset-component.ts","./src/app/accounts/need-help/password-reset/password-reset-component.html","./src/app/shared/models/accounts/need-help/update-password/update-password-request-model.ts","./src/app/accounts/need-help/update-password/update-password-component.ts","./src/app/accounts/need-help/update-password/update-password-component.html","./src/app/accounts/need-help/need-help-routing-module.ts"],"names":[],"mappings":"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","file":"accounts-need-help-need-help-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared-module'\r\nimport { PasswordResetComponent } from './password-reset/password-reset-component';\r\nimport { NeedHelpRoutingModule } from './need-help-routing-module';\r\nimport { UpdatePasswordComponent } from './update-password/update-password-component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PasswordResetComponent,\r\n        UpdatePasswordComponent\r\n    ],\r\n    imports: [\r\n        SharedModule,\r\n        NeedHelpRoutingModule\r\n    ],\r\n    exports: [\r\n        NeedHelpRoutingModule\r\n    ]\r\n})\r\nexport class NeedHelpModule {\r\n\r\n}","export class PasswordResetRequestModel {\r\n    email: string;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { PasswordResetRequestModel } from '../../../shared/models/accounts/need-help/password-reset/password-reset-request-model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { SpinnerService } from '../../../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../../../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../../../confirm-modal-component/confirm-modal-component';\r\nimport { AccountService } from '../../../shared/services/accounts/accounts-service';\r\nimport { ApiResponse } from '../../../shared/models/api-responses/api-response';\r\n\r\n@Component({\r\n    templateUrl: './password-reset-component.html',\r\n    styleUrls: ['./password-reset-component.css']\r\n})\r\nexport class PasswordResetComponent implements OnInit {\r\n\r\n    passwordResetRequestModel: PasswordResetRequestModel = new PasswordResetRequestModel();\r\n    modalRef: BsModalRef;\r\n\r\n    constructor(private router: Router,\r\n                private spinnerService: SpinnerService,\r\n                private toastrNotificationService: ToastrNotificationService,\r\n                private modalService: BsModalService,\r\n                private accountService: AccountService) { }\r\n\r\n    ngOnInit() {}\r\n\r\n    submitPasswordResetRequest(ngForm: NgForm) {\r\n\r\n        if (ngForm.valid) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: `Password reset link will be email on ${ this.passwordResetRequestModel.email }. Do you want to continue?`,\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Please wait.....');\r\n                            this.spinnerService.busy();\r\n                            this.accountService.passwordReset(this.passwordResetRequestModel)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    ngForm.reset();\r\n                                    this.spinnerService.idle();\r\n                                    this.toastrNotificationService.success('Password reset email is sent successfully');\r\n                                },\r\n                                error => {\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while sending email. Please try again');\r\n                               });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    navigateBackToLogin(ngForm: NgForm) {\r\n\r\n        if (ngForm.dirty) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Discard changes and navigate back to Login page?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.router.navigate(['/login']);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.router.navigate(['/login']);\r\n        }\r\n    }\r\n}","<div class=\"container-fluid reset-controls-container\">\r\n    <div class=\"row justify-content-center align-items-center h-100\">\r\n        <div class=\"col-md-4\">\r\n\r\n            <div class=\"col-md-12\">\r\n\r\n                <div class=\"card\">\r\n                    <div class=\"card-header bg-primary text-white\">\r\n                        Password Reset\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n\r\n                        <form #emailForm=\"ngForm\">\r\n\r\n                            <div class=\"form-group row email-row\">\r\n                                <label for=\"resetEmailAddress\" class=\"col-md-2 col-form-label\">Email</label>\r\n                                <div class=\"col-md-10\">\r\n                                    <input type=\"text\" class=\"form-control\" id=\"resetEmailAddress\"\r\n                                           name=\"resetEmailAddress\" placeholder=\"Email Address\"\r\n                                           required\r\n                                           pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\r\n                                           [(ngModel)]=\"passwordResetRequestModel.email\"\r\n                                           #email=\"ngModel\">\r\n                                    <small id=\"roleHelp\" class=\"form-text text-muted\">Password reset link will be sent to register email address.</small>\r\n                                    <p class=\"text-danger\" *ngIf=\"( (email.errors?.required && (email.dirty || email.touched)) )\">Email required</p>\r\n                                    <p class=\"text-danger\" *ngIf=\"( (email.errors?.pattern && (email.dirty || email.touched)) )\">Please enter valid Email</p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group row\">\r\n                                <div class=\"col-md-10 offset-2\">\r\n\r\n                                    <button type=\"submit\" class=\"btn btn-primary\" \r\n                                            [disabled]=\"!emailForm.valid\"\r\n                                            (click)=\"submitPasswordResetRequest(emailForm)\">\r\n                                        Submit\r\n                                    </button>\r\n\r\n                                    <button type=\"submit\" class=\"btn btn-warning ml-3\"\r\n                                            (click)=\"navigateBackToLogin(emailForm)\">\r\n                                        Back\r\n                                    </button>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n                       \r\n                       \r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n","export class UpdatePasswordRequestModel {\r\n    userName: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n    token: string;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { UpdatePasswordRequestModel } from '../../../shared/models/accounts/need-help/update-password/update-password-request-model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { SpinnerService } from '../../../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../../../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../../../confirm-modal-component/confirm-modal-component';\r\nimport { AccountService } from '../../../shared/services/accounts/accounts-service';\r\nimport { ApiResponse } from '../../../shared/models/api-responses/api-response';\r\n\r\n@Component({\r\n    templateUrl: './update-password-component.html',\r\n    styleUrls: ['./update-password-component.css']\r\n})\r\nexport class UpdatePasswordComponent implements OnInit {\r\n\r\n    updatepasswordResetRequestModel: UpdatePasswordRequestModel = new UpdatePasswordRequestModel();\r\n    modalRef: BsModalRef;\r\n\r\n    constructor(private router: Router,\r\n        private spinnerService: SpinnerService,\r\n        private toastrNotificationService: ToastrNotificationService,\r\n        private modalService: BsModalService,\r\n        private accountService: AccountService,\r\n        private route: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        this.route.queryParams.subscribe(params => {\r\n            this.updatepasswordResetRequestModel.token = params['token'];\r\n            console.log(this.updatepasswordResetRequestModel.token);\r\n        });\r\n    }\r\n\r\n    updatePassword(ngForm: NgForm) {\r\n\r\n        if (ngForm.valid) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: `Do you want to continue?`,\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Please wait.....');\r\n                            this.spinnerService.busy();\r\n                            this.accountService.updatePassword(this.updatepasswordResetRequestModel)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    if (response.data) {\r\n                                        ngForm.reset();\r\n                                        this.spinnerService.idle();\r\n                                        this.toastrNotificationService.success('Password updated successfully');\r\n                                        this.router.navigate(['/login']);\r\n                                    }\r\n                                    else {\r\n                                        ngForm.reset();\r\n                                        this.spinnerService.idle();\r\n                                        this.toastrNotificationService.success('Password update failed');\r\n                                    }\r\n                                },\r\n                                error => {\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while updating. Please try again');\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}","<div class=\"container-fluid reset-controls-container\">\r\n    <div class=\"row justify-content-center align-items-center h-100\">\r\n        <div class=\"col-md-6\">\r\n\r\n            <div class=\"col-md-12\">\r\n\r\n                <div class=\"card\">\r\n                    <div class=\"card-header bg-primary text-white\">\r\n                        Change Password\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n\r\n                        <form #updatePasswordForm=\"ngForm\">\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label for=\"userName\" class=\"label_controls col-form-label\">Username</label>\r\n                                <div class=\"input_controls\">\r\n                                    <input type=\"text\" class=\"form-control\" id=\"userName\"\r\n                                           name=\"userName\" placeholder=\"Username\"\r\n                                           required\r\n                                           [(ngModel)]=\"updatepasswordResetRequestModel.userName\"\r\n                                           #username=\"ngModel\">\r\n                                    <p class=\"text-danger\" *ngIf=\"( (username.errors?.required && (username.dirty || username.touched)) )\">Username is required</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label for=\"password\" class=\"label_controls col-form-label\">New Password</label>\r\n                                <div class=\"input_controls\">\r\n                                    <input type=\"password\" class=\"form-control\" id=\"password\"\r\n                                           name=\"password\" placeholder=\"New Password\"\r\n                                           required\r\n                                           pattern=\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,12}$\"\r\n                                           [(ngModel)]=\"updatepasswordResetRequestModel.password\"\r\n                                           #password=\"ngModel\"\r\n                                           compareEqual=\"confirmpassword\"\r\n                                           reverse=\"true\">\r\n                                    <p class=\"text-danger\" *ngIf=\"( (password.errors?.required && (password.dirty || password.touched)) )\">Password is required</p>\r\n                                    <p class=\"text-danger\" *ngIf=\"( (password.errors?.pattern && (password.dirty || password.touched)) )\">Password is invalid</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label for=\"confirmpassword\" class=\"col-form-label label_controls\">Confirm Password</label>\r\n                                <div class=\"input_controls\">\r\n                                    <input type=\"password\" class=\"form-control\" id=\"confirmpassword\"\r\n                                           name=\"confirmpassword\" placeholder=\"Confirm Password\"\r\n                                           [(ngModel)]=\"updatepasswordResetRequestModel.confirmPassword\"\r\n                                           #confirmpassword=\"ngModel\"\r\n                                           compareEqual=\"password\">\r\n\r\n                                    <p class=\"text-danger\" *ngIf=\"( confirmpassword.errors && !confirmpassword.errors?.compareEqual\r\n                                       && (confirmpassword.dirty || confirmpassword.touched) )\">Password Mismatch</p>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row\">\r\n                                <div class=\"label_controls\"></div>\r\n                                <div class=\"input_controls\">\r\n\r\n                                    <button type=\"submit\" class=\"btn btn-primary\"\r\n                                            [disabled]=\"!updatePasswordForm.valid\"\r\n                                            (click)=\"updatePassword(updatePasswordForm)\">\r\n                                        Submit\r\n                                    </button>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PasswordResetComponent } from './password-reset/password-reset-component'\r\nimport { UpdatePasswordComponent } from './update-password/update-password-component';\r\n\r\nconst needHelpModuleRoutes: Routes = [\r\n    { path: 'reset-password', component: PasswordResetComponent },\r\n    { path: 'update-password', component: UpdatePasswordComponent }\r\n];\r\n\r\n@NgModule({\r\n\r\n    imports: [\r\n        RouterModule.forChild(needHelpModuleRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class NeedHelpRoutingModule {\r\n\r\n}"],"sourceRoot":"webpack:///"}