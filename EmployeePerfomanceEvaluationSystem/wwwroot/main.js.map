{"version":3,"sources":["./src/app/shared/models/accounts/user-login/login-request-model.ts","./src/app/shared/shared-module.ts","./src/app/roles-component/roles-component.component.ts","./src/app/roles-component/roles-component.component.html","./src/app/shared/services/spinner/spinner-service.ts","./src/app/accounts/accounts-routing-module.ts","./src/app/nav-bar/nav-bar.component.ts","./src/app/nav-bar/nav-bar.component.html","./src/app/reporting-manager/view-reporting-manger-requests/reporting-manager-requests-component.ts","./src/app/reporting-manager/view-reporting-manger-requests/reporting-manager-requests-component.html","./src/app/shared/directives/match-controls-directive.ts","./src/app/accounts/accounts-module.ts","./src/environments/environment.ts","./src/app/shared/guards/check-user-authenticated-guard.ts","./src/app/shared/models/goals/goal.ts","./src/app/shared/models/user/approve-reporting-manager-request-model.ts","./src/app/accounts/user-registration/user-registration-component.ts","./src/app/accounts/user-registration/user-registration-component.html","./src/app/confirm-modal-component/confirm-modal-component.ts","./src/app/confirm-modal-component/confirm-modal-component.html","./src/app/shared/models/user/registered-users.ts","./src/app/goals/goals-component.ts","./src/app/goals/goals-component.html","./src/app/shared/models/accounts/user-registration/registration-request.ts","./src/app/user-details/user-details-component.ts","./src/app/user-details/user-details-component.html","./src/app/shared/services/departments/departments-service.ts","./src/app/shared/services/roles/role-service.ts","./src/app/shared/models/user/user-update-request-model.ts","./src/app/shared/models/user/user-response-model.ts","./src/app/shared/pipes/pagination-client.ts","./src/app/app.component.ts","./src/app/app-component.html","./src/app/departments-component/departments-component.component.ts","./src/app/departments-component/departments-component.component.html","./src/app/shared/services/goals/goals-service.ts","./src/app/shared/constant/constants.ts","./src/app/shared/models/user/reporting-manager-request-model.ts","./src/app/reporting-manager/reporting-request-routing-module.ts","./src/app/app.module.ts","./src/app/shared/models/departments/department.ts","./src/app/shared/services/accounts/accounts-service.ts","./src/app/accounts/user-registration/password-match-validation.ts","./src/app/unauthorized/unauthorized-component.ts","./src/app/unauthorized/unauthorized-component.html","./src/app/forbidden/forbidden-component.ts","./src/app/forbidden/forbidden-component.html","./src/app/user-details/user-details-routing-module.ts","./src/app/shared/services/toastr/toastr-service.ts","./src/app/shared/models/user/reporting-manager-response-model.ts","./src/app/shared/jwt/jwt-module.ts","./src/app/shared/models/roles/role.ts","./src/app/accounts/user-login/user-login-component.ts","./src/app/accounts/user-login/user-login-component.html","./src/app/home/home-component.ts","./src/app/home/home-component.html","./src/app/user-details/user-details-module.ts","./src/app/ngx-bootstrap-module.ts","./src/app/shared/interceptors/error-interceptor.ts","./src/app/reporting-manager/reporting-request-module.ts","./src/app/app-routing.module.ts","./src/app/reporting-manager/add-reporting-manager-requests/new-reporting-manager-request-component.ts","./src/app/reporting-manager/add-reporting-manager-requests/new-reporting-manager-request.html","./src/app/shared/services/user/user-service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class LoginRequestModel {\r\n    userName: string;\r\n    password: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PaginationPipePipe } from '../shared/pipes/pagination-client';\r\nimport { ControlsValueMatchValidator } from './directives/match-controls-directive';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PaginationPipePipe,\r\n        ControlsValueMatchValidator\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        PaginationPipePipe,\r\n        ControlsValueMatchValidator\r\n    ]\r\n})\r\nexport class SharedModule {\r\n\r\n}","import { Component, OnInit, ChangeDetectorRef  } from '@angular/core';\nimport { RoleService } from '../shared/services/roles/role-service';\r\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\r\nimport { Role } from '../shared/models/roles/role';\r\nimport { NgForm } from '@angular/forms';\r\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../confirm-modal-component/confirm-modal-component';\r\n\n@Component({\n  templateUrl: './roles-component.component.html',\n  styleUrls: ['./roles-component.component.css']\n})\nexport class RolesComponentComponent implements OnInit {\n\n    roles: Array<Role> = new Array<Role>();\n    rolesToDisplay: Array<Role> = new Array<Role>();\n    currentPage: number = 1;\n    itemsPerPage: number = 5;\n    roleModel: Role;\n    searchTerm: string;\n    loading: boolean = false;\n    modalRef: BsModalRef;\n\n    constructor(private roleService: RoleService,\n                private spinnerService: SpinnerService,\n                private toastrNotificationService: ToastrNotificationService,\n                private cdRef: ChangeDetectorRef,\n                private modalService: BsModalService) { }\n   \n    ngOnInit(): void {\n      this.resetVariables();\n      this.getRolesFromDatabase();\n    }\n\n    resetVariables() {\n        this.roleModel = new Role(0, '');\r\n        this.searchTerm = '';\r\n    }\n\n    private getRolesFromDatabase() {\n\r\n            this.loading = true;\r\n            this.spinnerService.updateMessage('Loading Roles.....');\r\n            this.spinnerService.busy();\r\n            this.roleService.getRoles()\r\n                .subscribe((response: ApiResponse) => {\r\n\r\n                    if (response.data != null) {\r\n                        this.roles = Role.FormRolesModelArray(response);\r\n                        this.rolesToDisplay = this.roles.slice();\r\n                    }\r\n                    this.loading = false;\r\n                    this.spinnerService.idle();\r\n                },\r\n                error => {\r\n                    this.loading = false;\r\n                    this.spinnerService.idle();\r\n                    console.log('Exception occured while fetching roles from Database');\r\n                });\r\n    }\n\n    pageChanged(event: any) {\n        this.currentPage = event.page;\r\n    }\n\n    addUpdateRole(roleForm: NgForm) {\n\n        if (roleForm.valid) {\n            if (this.roleModel.roleId != 0) {\r\n                this.updateRole(roleForm);\r\n            }\r\n            else {\r\n                this.addRole(roleForm);\r\n            }\r\n        }\r\n    }\n\n    private updateRole(roleForm: NgForm) {\n\n        this.spinnerService.updateMessage('Updating Role.....');\n        this.spinnerService.busy();\n        this.roleService.updateRole(this.roleModel)\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                var role = this.roles.find(r => r.roleId == this.roleModel.roleId);\r\n                if (null !== role) {\r\n                    role.roleName = this.roleModel.roleName;\r\n                }\r\n\r\n                roleForm.resetForm();\r\n                this.resetAfterDbOperation();\r\n  \r\n                this.rolesToDisplay = this.roles.slice();\r\n                this.spinnerService.idle();\r\n                this.toastrNotificationService.success('Role updated successfully');\r\n            },\r\n            error => {\r\n               this.spinnerService.idle();\r\n               console.log('Exception occured while updating roles from Database');\r\n            });\r\n    }\n\n    private addRole(roleForm: NgForm) {\n\n        this.spinnerService.updateMessage('Adding Role.....');\n        this.spinnerService.busy();\n        this.roleService.addRole(this.roleModel)\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                var newRole = new Role(response.data.roleId, response.data.roleName);\r\n                this.roles.push(newRole);\r\n                this.rolesToDisplay =  this.roles.slice();\r\n                this.resetAfterDbOperation();\r\n                roleForm.resetForm();\r\n                this.spinnerService.idle();\r\n                this.toastrNotificationService.success('Role added successfully');\r\n            },\r\n            error => {\r\n                this.spinnerService.idle();\r\n                console.log(`Exception occured while adding roles to Database`, error);\r\n            });\r\n    }\n\n    editRole(role: Role) {\n        this.roleModel = new Role(role.roleId, role.roleName);\r\n    }\n\n    resetRoleSelection(roleForm: NgForm) {\n        this.resetVariables();\r\n        roleForm.resetForm();\r\n        this.rolesToDisplay = this.roles.slice();\r\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });   \r\n        this.cdRef.detectChanges();\r\n    }\n\n    private resetAfterDbOperation() {\n        this.resetVariables();\r\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });      \r\n        this.cdRef.detectChanges();\r\n    }\n\n    deleteRole(role: Role) {\n\r\n        this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n            initialState: {\r\n                promptMessage: 'Are you sure you want to delete this record?',\r\n                callback: (result) => {\r\n                    if (result) {\r\n\r\n                        this.spinnerService.updateMessage('Deleting Role.....');\r\n                        this.spinnerService.busy();\r\n                        this.roleService.deleteRole(role)\r\n                            .subscribe((response: ApiResponse) => {\r\n\r\n                                this.roles = this.roles.filter(r => r.roleId != role.roleId);\r\n                                this.rolesToDisplay = this.roles.slice();\r\n                                this.resetAfterDbOperation();\r\n                                this.spinnerService.idle();\r\n                                this.toastrNotificationService.success('Role deleted successfully');\r\n\r\n                            },\r\n                            error => {\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while deleting roles from Database');\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        });       \r\n    }\n\n    searchRole() {\n        if (this.searchTerm != '') {\r\n            this.rolesToDisplay = this.roles.filter(r => r.roleName.toLocaleLowerCase()\r\n                .indexOf(this.searchTerm.toLocaleLowerCase()) != -1);\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            }, 0);   \r\n            this.cdRef.detectChanges();   \r\n        }\r\n        else {\r\n            this.rolesToDisplay = this.roles.slice();\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            }, 0);   \r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\n}\n","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-7 offset-2\">\r\n\r\n        <div class=\"title_role_management\">\r\n            <h3> Roles Management </h3>\r\n        </div>\r\n\r\n        <div *ngIf=\"!loading\">\r\n            <form #roleForm=\"ngForm\" novalidate>\r\n\r\n                <div class=\"input-group col-md-5 role_search_control\">\r\n                    <input class=\"form-control\" placeholder=\"search\"\r\n                           value=\"search\" name=\"search-input\"\r\n                           [(ngModel)]=\"searchTerm\">\r\n                    <span class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"searchRole()\">\r\n                            <i class=\"fa fa-search\"></i>\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n\r\n                <div class=\"row table_container_row\">\r\n                    <div class=\"col-md-12 table_container_column\">\r\n\r\n                        <table name=\"rolesTable\" class=\"table table-bordered table-hover rolesTable\" *ngIf=\"rolesToDisplay.length > 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let role of (rolesToDisplay | paginationPipe:currentPage:itemsPerPage)\" class=\"table-style\">\r\n                                    <th scope=\"row\"> {{ role.roleName }}</th>\r\n                                    <td class=\"role_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"editRole(role)\">\r\n                                            <span class=\"fa fa-pencil-square-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                    <td class=\"role_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"deleteRole(role)\">\r\n                                            <span class=\"fa fa-trash-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n\r\n                        <table name=\"norolesTable\" class=\"table table-bordered table-hover rolesTable\" *ngIf=\"rolesToDisplay.length == 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr class=\"table-style\">\r\n\r\n                                    <td class=\"role_table_controls\" colspan=\"3\">\r\n                                        No Records Found\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n                \r\n\r\n                <div class=\"row\" *ngIf=\"rolesToDisplay.length > 0\">\r\n                    <div class=\"col-xs-12 col-12 pager-div\">\r\n                        <pagination name=\"paginationControl\" (pageChanged)=\"pageChanged($event)\"\r\n                                    [totalItems]=\"rolesToDisplay.length\"\r\n                                    [itemsPerPage]=\"itemsPerPage\"\r\n                                    [maxSize]=\"itemsPerPage\"\r\n                                    [(ngModel)]=\"currentPage\">\r\n\r\n                        </pagination>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-12 col-12\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"roleName\">Role Name</label>\r\n                            <input type=\"text\" class=\"form-control\"\r\n                                   name=\"roleName\" placeholder=\"Role Name\"\r\n                                   [(ngModel)]=\"roleModel.roleName\"\r\n                                   #roleName=\"ngModel\"\r\n                                   required\r\n                                   maxlength=\"50\">\r\n                            <small id=\"roleHelp\" class=\"form-text text-muted\">Please enter new role missing in database.</small>\r\n                        </div>\r\n                        <div *ngIf=\"roleName.invalid && (roleName.dirty || roleName.touched)\"\r\n                             class=\"alert alert-danger\">\r\n\r\n                            <div *ngIf=\"roleName.errors.required\">\r\n                                Role Name is required.\r\n                            </div>\r\n                            <div *ngIf=\"roleName.errors.maxlength\">\r\n                                Role Name cannot exceeds 50 characters.\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" class=\"btn btn-primary\"\r\n                                (click)=\"addUpdateRole(roleForm)\"\r\n                                [disabled]=\"roleForm.invalid\">\r\n                            Submit\r\n                        </button>\r\n\r\n                        <button type=\"submit\" class=\"btn btn-warning ml-3\"\r\n                                (click)=\"resetRoleSelection(roleForm)\"\r\n                                [disabled]=\"roleForm.invalid\">\r\n                            Reset\r\n                        </button>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n        \r\n\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class SpinnerService {\r\n\r\n    constructor(private spinnerService: NgxSpinnerService) {\r\n\r\n    }\r\n\r\n    private messageBehaviour = new BehaviorSubject<string>('Loading...');\r\n    messageObservable = this.messageBehaviour.asObservable();\r\n\r\n\r\n    updateMessage(message: string) {\r\n        this.messageBehaviour.next(message);\r\n    }\r\n\r\n    busy(message: string = 'Loading....') {\r\n        this.spinnerService.show(undefined, {\r\n            type: 'square-spin',\r\n            bdColor: 'rgba(0, 0, 0, 0.8)',\r\n            color: '#fff',\r\n            size:'medium'\r\n        });\r\n    }\r\n\r\n    idle() {\r\n        this.spinnerService.hide();\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRegistrationComponent } from './user-registration/user-registration-component';\r\nimport { UserLoginComponent } from './user-login/user-login-component';\r\n\r\nconst accountsModuleRoutes: Routes = [\r\n    { path: 'register', component: UserRegistrationComponent },\r\n    { path: 'login', component: UserLoginComponent }\r\n];\r\n\r\n@NgModule({\r\n\r\n    imports: [\r\n        RouterModule.forChild(accountsModuleRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AccountsRoutingModule {\r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { AccountService } from '../shared/services/accounts/accounts-service';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n\n    isLoggedIn: Observable<boolean>;\n\n    constructor(public accountService: AccountService,\n                private router: Router) { }\n\n    ngOnInit(): void {\n        this.isLoggedIn = this.accountService.isLoggedInObservable();\n    }\n\n    logout() {\n        this.accountService.removeTokenFromStorage();\r\n        this.router.navigate(['/login']);\r\n    }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light p-3 px-md-4 mb-3 bg-dark border-bottom shadow-sm\">\r\n    <a class=\"navbar-brand\">Performance Evaluation System</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n\r\n            <li class=\"nav-item\" *ngIf=\"accountService.isAuthenticated()\">\r\n                <a class=\"nav-link\" [routerLink]=\"['/home']\" routerLinkActive=\"active\">Home</a>\r\n            </li>\r\n\r\n            <li class=\"nav-item dropdown active\" *ngIf=\"accountService.isAuthenticated() &&\r\n                                                        accountService.isAdminUser()\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\"\r\n                   role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Manage\r\n                </a>\r\n                <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/roles']\" routerLinkActive=\"active\">Manage Roles</a>\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/departments']\" routerLinkActive=\"active\">Manage Departments</a>\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/goals']\" routerLinkActive=\"active\">Manage Goals</a>\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/iterations']\" routerLinkActive=\"active\">Manage Iterations</a>\r\n                </div>\r\n            </li>\r\n\r\n            <li class=\"nav-item dropdown active\" *ngIf=\"accountService.isAuthenticated()\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\"\r\n                   role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Requests\r\n                </a>\r\n                <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/reporting-manager-request']\"\r\n                       routerLinkActive=\"active\"\r\n                       *ngIf=\"!accountService.isAdminUser()\">Reporting Manager</a>\r\n\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/view-reporting-manager-request']\" \r\n                       routerLinkActive=\"active\"\r\n                       *ngIf=\"accountService.isAdminUser()\">Reporting Manager</a>\r\n                \r\n                </div>\r\n            </li>\r\n\r\n\r\n        </ul>\r\n\r\n        <ul class=\"navbar-nav ml-auto\" *ngIf=\"accountService.isAuthenticated()\">\r\n\r\n            <li class=\"nav-item dropdown\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" \r\n                   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    WELCOME, {{accountService.getUserName() }}\r\n                </a>\r\n                <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\">\r\n                    <a class=\"dropdown-item\" [routerLink]=\"['/user-details']\" routerLinkActive=\"active\">Edit Profile</a>\r\n                    <a class=\"dropdown-item\" (click)=\"logout()\">Logout</a>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n\r\n    </div>\r\n</nav>","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UserService } from '../../shared/services/user/user-service';\r\nimport { ApiResponse } from '../../shared/models/api-responses/api-response';\r\nimport { ReportingManagerResponseModel } from '../../shared/models/user/reporting-manager-response-model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { SpinnerService } from '../../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../../confirm-modal-component/confirm-modal-component';\r\nimport { ApproveReportingManagerRequestModel } from '../../shared/models/user/approve-reporting-manager-request-model';\r\n\r\n@Component({\r\n    templateUrl: './reporting-manager-requests-component.html',\r\n    styleUrls: ['./reporting-manager-requests-component.css']\r\n})\r\nexport class ReportingManagerRequestsComponent implements OnInit {\r\n\r\n    pendingRequests: Array<ReportingManagerResponseModel> = new Array<ReportingManagerResponseModel>();\r\n    pendingRequestsToDisplay: Array<ReportingManagerResponseModel> = new Array<ReportingManagerResponseModel>();\r\n    currentPage: number = 1;\r\n    itemsPerPage: number = 5;\r\n    searchTerm: string;\r\n    loading: boolean = false;\r\n    modalRef: BsModalRef;\r\n\r\n    constructor(private userService: UserService,\r\n        private spinnerService: SpinnerService,\r\n        private toastrNotificationService: ToastrNotificationService,\r\n        private cdRef: ChangeDetectorRef,\r\n        private modalService: BsModalService) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.resetVariables();\r\n        this.getPendingRequestsFromDatabase();\r\n    }\r\n\r\n    resetVariables() {\r\n        this.searchTerm = '';\r\n    }\r\n\r\n    private getPendingRequestsFromDatabase() {\r\n\r\n        this.loading = true;\r\n        this.spinnerService.updateMessage('Loading pending reporting manager requests.....');\r\n        this.spinnerService.busy();\r\n        this.userService.getPendingReportingManagerRequests()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.pendingRequests = ReportingManagerResponseModel.FormReportingRequestsModelArray(response);\r\n                    this.pendingRequestsToDisplay = this.pendingRequests.slice();\r\n                }\r\n\r\n                this.loading = false;\r\n                this.spinnerService.idle();\r\n            },\r\n            error => {\r\n\r\n                this.loading = false;\r\n                this.spinnerService.idle();\r\n                console.log('Exception occured while fetching pending reporting manager requests from Database');\r\n            });\r\n    }\r\n\r\n    pageChanged(event: any) {\r\n        this.currentPage = event.page;\r\n    }\r\n\r\n    searchRequests() {\r\n\r\n        if (this.searchTerm != '' && this.searchTerm != null && this.searchTerm != undefined) {\r\n            this.pendingRequestsToDisplay = this.pendingRequests.filter(r => r.reportedUserEmail.toLocaleLowerCase()\r\n                                                .indexOf(this.searchTerm.toLocaleLowerCase()) != -1);\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\r\n        }\r\n        else {\r\n            this.pendingRequestsToDisplay = this.pendingRequests.slice();\r\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    approveRequest(request: ReportingManagerResponseModel) {\r\n\r\n        this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n            initialState: {\r\n                promptMessage: 'Are you sure you want to confirm request?',\r\n                callback: (result) => {\r\n                    if (result) {\r\n\r\n                        let approvalRequest: ApproveReportingManagerRequestModel = this.mapApprovalReportingManagerRequest(request);\r\n                        this.spinnerService.updateMessage('Updating reporting manager.....');\r\n                        this.spinnerService.busy();\r\n                        this.userService.approvePendingReportingManagerRequests(approvalRequest)\r\n                            .subscribe((response: ApiResponse) => {\r\n\r\n                                this.getPendingRequestsFromDatabaseAfterEditDelete('Request approved successfully');\r\n                               \r\n                            },\r\n                            error => {\r\n                                 this.spinnerService.idle();\r\n                                 console.log('Exception occured while approving reporting manager request');\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private mapApprovalReportingManagerRequest(request: ReportingManagerResponseModel): ApproveReportingManagerRequestModel {\r\n\r\n        let approvalRequest: ApproveReportingManagerRequestModel = new ApproveReportingManagerRequestModel();\r\n        approvalRequest.reportingManagerRequestId = request.reportingManagerRequestId;\r\n        approvalRequest.reportedUserId = request.reportedUserId;\r\n        approvalRequest.reportedUserEmail = request.reportedUserEmail;\r\n        approvalRequest.currentReportingManagerId = request.currentReportingManagerId;\r\n        approvalRequest.currentReportingManagerEmail = request.currentReportingManagerEmail;\r\n        approvalRequest.newReportingManagerId = request.newReportingManagerId;\r\n        approvalRequest.newReportingManagerEmail = request.newReportingManagerEmail;\r\n        approvalRequest.status = request.status;\r\n\r\n        return approvalRequest;\r\n    }\r\n\r\n    deleteRequest(request: ReportingManagerResponseModel) {\r\n\r\n        this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n            initialState: {\r\n                promptMessage: 'Are you sure you want to delete request?',\r\n                callback: (result) => {\r\n                    if (result) {\r\n\r\n                        this.spinnerService.updateMessage('Deleting reporting manager request.....');\r\n                        this.spinnerService.busy();\r\n                        this.userService.rejectPendingReportingManagerRequests(request.reportingManagerRequestId)\r\n                            .subscribe((response: ApiResponse) => {\r\n\r\n                                this.getPendingRequestsFromDatabaseAfterEditDelete('Request deleted successfully');\r\n\r\n                            },\r\n                            error => {\r\n                                this.spinnerService.idle();\r\n                                console.log('Exception occured while deleting reporting manager request');\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private getPendingRequestsFromDatabaseAfterEditDelete(message: string) {\r\n\r\n        this.userService.getPendingReportingManagerRequests()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.pendingRequests = ReportingManagerResponseModel.FormReportingRequestsModelArray(response);\r\n                    this.pendingRequestsToDisplay = this.pendingRequests.slice();\r\n                }\r\n\r\n                this.resetAfterDbOperation();\r\n                this.spinnerService.idle();\r\n                this.toastrNotificationService.success(message);\r\n            },\r\n           error => {\r\n\r\n                this.loading = false;\r\n                this.spinnerService.idle();\r\n                console.log('Exception occured getPendingRequestsFromDatabaseAfterEditDelete()');\r\n           });\r\n    }\r\n\r\n    private resetAfterDbOperation() {\r\n        this.resetVariables();\r\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\r\n    }\r\n}","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-9 offset-1\">\r\n\r\n        <div class=\"title_reporting_manager_requests_management\">\r\n            <h3> Reporting Manager Requests </h3>\r\n        </div>\r\n\r\n        <div *ngIf=\"!loading\">\r\n            <form #goalForm=\"ngForm\" novalidate>\r\n\r\n                <div class=\"input-group col-md-5 reporting_manager_search_control\">\r\n                    <input class=\"form-control\" placeholder=\"search by reported user\"\r\n                           value=\"search\" name=\"search-input\"\r\n                           [(ngModel)]=\"searchTerm\">\r\n                    <span class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"searchRequests()\">\r\n                            <i class=\"fa fa-search\"></i>\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n\r\n\r\n                <div class=\"row table_container_row\">\r\n                    <div class=\"col-md-12 table_container_column\">\r\n\r\n                        <table name=\"goalsTable\" class=\"table table-bordered table-hover reporting_manager_table\"\r\n                                                 *ngIf=\"pendingRequestsToDisplay.length > 0\">\r\n\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">User</th>\r\n                                    <th scope=\"col\">Current Manager</th>\r\n                                    <th scope=\"col\">New Manager</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let request of (pendingRequestsToDisplay | paginationPipe:currentPage:itemsPerPage)\" class=\"table-style\">\r\n                                    <th scope=\"row\"> {{ request.reportedUserEmail }}</th>\r\n                                    <th scope=\"row\"> {{ request.currentReportingManagerEmail }}</th>\r\n                                    <th scope=\"row\"> {{ request.newReportingManagerEmail }}</th>\r\n                                    <td class=\"reporting_manager_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"approveRequest(request)\">\r\n                                            <span class=\"fa fa-check-square-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                    <td class=\"reporting_manager_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"deleteRequest(request)\">\r\n                                            <span class=\"fa fa-trash-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table name=\"norequestsTable\" class=\"table table-bordered table-hover mt-5 reporting_manager_table\" *ngIf=\"pendingRequestsToDisplay.length == 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">User</th>\r\n                                    <th scope=\"col\">Current Manager</th>\r\n                                    <th scope=\"col\">New Manager</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr class=\"table-style\">\r\n\r\n                                    <td class=\"reporting_manager_table_controls\" colspan=\"5\">\r\n                                        No Records Found\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row\" *ngIf=\"pendingRequestsToDisplay.length > 0\">\r\n                    <div class=\"col-xs-12 col-12 pager-div\">\r\n                        <pagination name=\"paginationControl\" (pageChanged)=\"pageChanged($event)\"\r\n                                    [totalItems]=\"pendingRequestsToDisplay.length\"\r\n                                    [itemsPerPage]=\"itemsPerPage\"\r\n                                    [maxSize]=\"itemsPerPage\"\r\n                                    [(ngModel)]=\"currentPage\">\r\n\r\n                        </pagination>\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\n@Directive({\r\n    selector: '[compareEqual]',\r\n    providers: [\r\n        { provide: NG_VALIDATORS, useExisting: ControlsValueMatchValidator, multi: true }\r\n    ]\r\n})\r\nexport class ControlsValueMatchValidator implements Validator {\r\n\r\n    @Input('compareEqual') controlToCompare: string;\r\n    @Input('reverse') reverse: string;\r\n\r\n    validate(c: AbstractControl): { [key: string]: any } {\r\n        return this.controlToCompare ? compareValueValidator(this.controlToCompare, this.reverse)(c)\r\n            : null;\r\n    }\r\n}\r\n\r\nexport function compareValueValidator(controlToCompare: string, reverse: string): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: any } | null => {\r\n        // self value\r\n        let v = c.value;\r\n\r\n        // control vlaue\r\n        let e = c.root.get(controlToCompare);\r\n\r\n        // value not equal\r\n        if (e && v !== e.value && !isReverse(reverse)) {\r\n            return {\r\n                compareEqual: false\r\n            }\r\n        }\r\n\r\n        // value equal and reverse\r\n        if (e && v === e.value && isReverse(reverse)) {\r\n            delete e.errors['compareEqual'];\r\n            if (!Object.keys(e.errors).length) e.setErrors(null);\r\n        }\r\n\r\n        // value not equal and reverse\r\n        if (e && v !== e.value && isReverse(reverse)) {\r\n            e.setErrors({ compareEqual: false });\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction isReverse(reverse) {\r\n    if (!reverse) return false;\r\n    return reverse === 'true' ? true : false;\r\n}\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from '../shared/shared-module'\r\nimport { UserRegistrationComponent } from './user-registration/user-registration-component';\r\nimport { AccountsRoutingModule } from './accounts-routing-module';\r\nimport { UserLoginComponent } from './user-login/user-login-component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        UserRegistrationComponent,\r\n        UserLoginComponent\r\n    ],\r\n    imports: [\r\n        SharedModule,\r\n        AccountsRoutingModule\r\n    ]\r\n})\r\nexport class AccountsModule {\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AccountService } from '../services/accounts/accounts-service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n    constructor(public accountService: AccountService,\r\n                public router: Router) { }\r\n\r\n    canActivate(): boolean {\r\n\r\n        if (!this.accountService.isAuthenticated()) {\r\n\r\n            this.router.navigate(['/unauthorized']);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}","export class Goal {\r\n\r\n    goalId: number;\r\n    goalName: string;\r\n    isActive: boolean;\r\n\r\n    constructor(goalId, goalName, isActive) {\r\n        this.goalId = goalId;\r\n        this.goalName = goalName;\r\n    }\r\n\r\n    static FormGoalModelArray(response: any): Array<Goal> {\r\n\r\n        var goalArray: Array<Goal> = new Array<Goal>();\r\n        for (var data of response.data) {\r\n            var goal = new Goal(data.goalId, data.goalName, data.isActive);\r\n            goalArray.push(goal);\r\n        }\r\n\r\n        return goalArray;\r\n    }\r\n}","export class ApproveReportingManagerRequestModel {\r\n    reportingManagerRequestId: number;\r\n    reportedUserId: number;\r\n    reportedUserEmail: string;\r\n    currentReportingManagerId: number;\r\n    currentReportingManagerEmail: string;\r\n    newReportingManagerId: number;\r\n    newReportingManagerEmail: string;\r\n    status: boolean;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { PasswordMatchValidation } from './password-match-validation';\r\nimport { RoleService } from '../../shared/services/roles/role-service';\r\nimport { ApiResponse } from '../../shared/models/api-responses/api-response';\r\nimport { Role } from '../../shared/models/roles/role';\r\nimport { DepartmentService } from '../../shared/services/departments/departments-service';\r\nimport { Department } from '../../shared/models/departments/department';\r\nimport { AccountService } from '../../shared/services/accounts/accounts-service';\r\nimport { RegistrationRequestModel } from '../../shared/models/accounts/user-registration/registration-request';\r\nimport { SpinnerService } from '../../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../../confirm-modal-component/confirm-modal-component';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n    templateUrl: './user-registration-component.html',\r\n    styleUrls: ['./user-registration-component.css']\r\n})\r\nexport class UserRegistrationComponent  implements OnInit {\r\n\r\n    registrationFormGroup: FormGroup;\r\n    roles: Array<Role> = Array<Role>();\r\n    departments: Array<Department> = new Array<Department>();\r\n    modalRef: BsModalRef;\r\n\r\n    constructor(private registrationFormBuilder: FormBuilder,\r\n                private roleService: RoleService,\r\n                private departmentService: DepartmentService,\r\n                private accountService: AccountService,\r\n                private spinnerService: SpinnerService,\r\n                private toastrNotificationService: ToastrNotificationService,\r\n                private modalService: BsModalService,\r\n                private router: Router) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeRegistrationFormGroup();\r\n        this.loadRoles();\r\n        this.loadDepartments();\r\n    }\r\n\r\n    private initializeRegistrationFormGroup() {\r\n        this.registrationFormGroup = this.registrationFormBuilder.group({\r\n            firstName: ['', [Validators.required, Validators.maxLength(50)]],\r\n\r\n            lastName: ['', [Validators.required, Validators.maxLength(50)]],\r\n\r\n            email: ['', [Validators.required, Validators.maxLength(100),\r\n                Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]],\r\n\r\n            passwordGroup: this.registrationFormBuilder.group({\r\n                password: ['', [Validators.required,\r\n                    this.patternValidator()\r\n                ]],\r\n\r\n                confirmPassword: ['']\r\n            }, { validator: PasswordMatchValidation.matchPassword } ),\r\n\r\n            contactNumber: ['', [Validators.required, Validators.maxLength(10), Validators.pattern(\"^[0-9]*$\")]],\r\n\r\n            gender: ['M'],\r\n\r\n            role: ['', [Validators.required]],\r\n\r\n            department: ['', [Validators.required]],\r\n        });\r\n    }\r\n\r\n    loadRoles() {\r\n\r\n        this.roleService.getRoles()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.roles = Role.FormRolesModelArray(response);\r\n                }\r\n            },\r\n                error => {\r\n\r\n                console.log('Exception occured while fetching roles from Database');\r\n            });\r\n    }\r\n\r\n    loadDepartments() {\r\n\r\n        this.departmentService.getDepartments()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                if (response.data != null) {\r\n                    this.departments = Department.FormDepartmentModelArray(response);\r\n                }\r\n            },\r\n            error => {\r\n\r\n                console.log('Exception occured while fetching roles from Database');\r\n            });\r\n    }\r\n\r\n    registerUser() {\r\n\r\n        if (this.registrationFormGroup.valid) {\r\n           \r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Continue to register?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Registering User. Please wait.....');\r\n                            this.spinnerService.busy();\r\n                            var registrationRequestModel: RegistrationRequestModel = this.MapFormGroupToRegistrationRequest();\r\n                            this.accountService.registerUser(registrationRequestModel)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    this.registrationFormGroup.reset();\r\n                                    this.initializeRegistrationFormGroup();\r\n                                    this.spinnerService.idle();\r\n                                    this.toastrNotificationService.success('User registered successfully');\r\n                                },\r\n                                error => {\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while registering new user');\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private MapFormGroupToRegistrationRequest(): RegistrationRequestModel{\r\n\r\n        var registrationRequestModel = new RegistrationRequestModel();\r\n        registrationRequestModel.firstName = this.registrationFormGroup.value.firstName;\r\n        registrationRequestModel.lastName = this.registrationFormGroup.value.lastName;\r\n        registrationRequestModel.email = this.registrationFormGroup.value.email;\r\n        registrationRequestModel.password = this.registrationFormGroup.value.passwordGroup.password;\r\n        registrationRequestModel.userName = this.registrationFormGroup.value.email;\r\n        registrationRequestModel.roleId = this.registrationFormGroup.value.role * 1;\r\n        registrationRequestModel.departmentId = this.registrationFormGroup.value.department * 1;\r\n        registrationRequestModel.gender = this.registrationFormGroup.value.gender;\r\n        registrationRequestModel.contactNumber = ''+this.registrationFormGroup.value.contactNumber;\r\n        registrationRequestModel.reportingManagerId = 0;\r\n\r\n        return registrationRequestModel;\r\n    }\r\n\r\n    navigateLogin() {\r\n\r\n        if (this.registrationFormGroup.dirty) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Discard changes and navigate back to Login page?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.router.navigate(['/login']);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.router.navigate(['/login']);\r\n        }\r\n    }\r\n\r\n    patternValidator(): ValidatorFn {\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (!control.value) {\r\n                return null;\r\n            }\r\n            const regex = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,12}$');\r\n            const valid = regex.test(control.value);\r\n            return valid ? null : { invalidPassword: true };\r\n        };\r\n    }\r\n}","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-7 offset-3\">\r\n\r\n        <div class=\"title_user_registration\">\r\n            <h3> New User Registration </h3>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-10 mt-3 registration-controls\">\r\n                <form [formGroup]=\"registrationFormGroup\" novalidate>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"firstName\">First Name</label>\r\n\r\n                        <input type=\"text\" class=\"form-control\"\r\n                               name=\"firstName\" placeholder=\"First Name\"\r\n                               formControlName=\"firstName\">\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('firstName').hasError('required')\r\n                                                    && registrationFormGroup.get('firstName').touched\">* First Name is required</p>\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('firstName').hasError('maxlength')\r\n                                                    && registrationFormGroup.get('firstName').touched\">* First Name cannot exceeds 50 characters</p>\r\n\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"lastName\">Last Name</label>\r\n\r\n                        <input type=\"text\" class=\"form-control\"\r\n                               name=\"lastName\" placeholder=\"Last Name\"\r\n                               formControlName=\"lastName\">\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('lastName').hasError('required')\r\n                                                    && registrationFormGroup.get('lastName').touched\">* Last Name is required</p>\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('lastName').hasError('maxlength')\r\n                                                    && registrationFormGroup.get('lastName').touched\">* Last Name cannot exceeds 50 characters</p>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"email\">Email</label>\r\n                        <input type=\"text\" class=\"form-control\"\r\n                               name=\"email\" placeholder=\"Email\"\r\n                               formControlName=\"email\">\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('email').hasError('required')\r\n                                                    && registrationFormGroup.get('email').touched\">* Email is required</p>\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('email').hasError('pattern')\r\n                                                    && registrationFormGroup.get('email').touched\">* Please enter valid email</p>\r\n\r\n                    </div>\r\n\r\n                    <div formGroupName=\"passwordGroup\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\">Password</label>\r\n                            <input type=\"password\" class=\"form-control\"\r\n                                   name=\"password\" placeholder=\"Password\"\r\n                                   formControlName=\"password\">\r\n\r\n                            <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('passwordGroup.password').hasError('required')\r\n                                                    && registrationFormGroup.get('passwordGroup.password').touched\">* Password is required</p>\r\n\r\n                            <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('passwordGroup.password').hasError('invalidPassword')\r\n                                                    && registrationFormGroup.get('passwordGroup.password').touched\">* Password must be atleast 8 - 12 charcters long, and should contain One digit, One Upper case and One Lower case character.</p>\r\n\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"confirmPassword\">Confirm Password</label>\r\n                            <input type=\"password\" class=\"form-control\"\r\n                                   name=\"confirmPassword\" placeholder=\"Confirm Password\"\r\n                                   formControlName=\"confirmPassword\">\r\n\r\n                            <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('passwordGroup').hasError('invalidPassword')\r\n                                                    && registrationFormGroup.get('passwordGroup.password').touched\">* Password Mismatch</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                    \r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"contactNumber\">Contact Number</label>\r\n                        <input type=\"number\" class=\"form-control\"\r\n                               name=\"contactNumber\" placeholder=\"Contact Number\"\r\n                               formControlName=\"contactNumber\">\r\n\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('contactNumber').hasError('required')\r\n                                                    && registrationFormGroup.get('contactNumber').touched\">* Contact Number is required</p>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <div>\r\n                            <label for=\"gender\">Gender</label>\r\n                        </div>\r\n\r\n                        <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                            <label class=\"btn btn-secondary\" [class.active]=\"registrationFormGroup.get('gender').value == 'M'\">\r\n                                <input type=\"radio\" formControlName=\"gender\" \r\n                                       id=\"option1\" value=\"M\"\r\n                                       [checked]=\"registrationFormGroup.get('gender').value == 'M'\"> Male\r\n                            </label>\r\n                            <label class=\"btn btn-secondary\" [class.active]=\"registrationFormGroup.get('gender').value == 'F'\">\r\n                                <input type=\"radio\" formControlName=\"gender\" id=\"option2\" \r\n                                       value=\"F\"\r\n                                       [checked]=\"registrationFormGroup.get('gender').value == 'F'\"> Female\r\n                            </label>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"role\">Role</label>\r\n                        <select id=\"role\" class=\"form-control\" formControlName=\"role\">\r\n                            <option value=\"\" disabled>Choose...</option>\r\n                            <option *ngFor=\"let role of roles\" [value]=\"role.roleId\">{{ role.roleName }}</option>\r\n                        </select>\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('role').hasError('required')\r\n                                                    && registrationFormGroup.get('role').touched\">* Please select Role</p>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"department\">Department</label>\r\n                        <select id=\"department\" class=\"form-control\" formControlName=\"department\">\r\n                            <option value=\"\" disabled>Choose...</option>\r\n                            <option *ngFor=\"let department of departments\" [value]=\"department.departmentId\">{{ department.departmentName }}</option>\r\n                        </select>\r\n                        <p class=\"help-block\" *ngIf=\"registrationFormGroup.get('department').hasError('required')\r\n                                                    && registrationFormGroup.get('department').touched\">* Please select Department</p>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" class=\"btn btn-primary registration_buttons\" \r\n                            [disabled]=\"!registrationFormGroup.valid\"\r\n                            (click)=\"registerUser()\">\r\n                        Submit\r\n                    </button>\r\n\r\n                    <button type=\"submit\" class=\"btn btn-outline-dark ml-3 registration_buttons\"\r\n                            (click)=\"navigateLogin()\">\r\n                        Back\r\n                    </button>\r\n\r\n                </form>\r\n            </div>\r\n       \r\n        </div>\r\n     \r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\n@Component({\r\n    selector: 'app-confirm-modal',\r\n    templateUrl: './confirm-modal-component.html',\r\n    styleUrls: ['./confirm-modal-component.css']\r\n})\r\nexport class ConfirmModalComponent implements OnInit {\r\n\r\n    promptMessage: string;\r\n\r\n    constructor(public bsModalRef: BsModalRef) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    confirm() {\r\n        if (this.bsModalRef.content.callback != null) {\r\n            this.bsModalRef.content.callback(true);\r\n            this.bsModalRef.hide();\r\n        }\r\n    }\r\n\r\n    decline() {\r\n        if (this.bsModalRef.content.callback != null) {\r\n            this.bsModalRef.content.callback(false);\r\n            this.bsModalRef.hide();\r\n        }\r\n    }\r\n}","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title pull-left\">Confirm!!!!!</h4>\r\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"decline()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body text-center\">\r\n    <p>{{promptMessage}}</p>\r\n    <button type=\"button\" class=\"btn btn-danger mr-3 confirm_buttons\" (click)=\"confirm()\">Yes</button>\r\n    <button type=\"button\" class=\"btn btn-primary confirm_buttons\" (click)=\"decline()\">No</button>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"decline()\">Close</button>\r\n</div>","export class RegisteredUsers {\r\n\r\n    userId: number;\r\n    email: string;\r\n\r\n    constructor(userId, email) {\r\n        this.userId = userId;\r\n        this.email = email;\r\n    }\r\n\r\n    static FormRegisterUsersModelArray(response: any): Array<RegisteredUsers> {\r\n\r\n        var registeredUsersArray: Array<RegisteredUsers> = new Array<RegisteredUsers>();\r\n        for (var data of response.data) {\r\n            var user = new RegisteredUsers(data.userId, data.email);\r\n            registeredUsersArray.push(user);\r\n        }\r\n\r\n        return registeredUsersArray;\r\n    }\r\n}","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { GoalsService } from '../shared/services/goals/goals-service';\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\nimport { Goal } from '../shared/models/goals/goal';\nimport { NgForm } from '@angular/forms';\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../shared/services/toastr/toastr-service';\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../confirm-modal-component/confirm-modal-component';\r\n\n@Component({\n    templateUrl: './goals-component.html',\n    styleUrls: ['./goals-component.css']\n})\nexport class GoalsComponentComponent implements OnInit {\n\n    goals: Array<Goal> = new Array<Goal>();\n    goalsToDisplay: Array<Goal> = new Array<Goal>();\n    currentPage: number = 1;\n    itemsPerPage: number = 5;\n    goalModel: Goal;\n    searchTerm: string;\n    loading: boolean = false;\n    modalRef: BsModalRef;\n\n    constructor(private goalService: GoalsService,\n        private spinnerService: SpinnerService,\n        private toastrNotificationService: ToastrNotificationService,\n        private cdRef: ChangeDetectorRef,\n        private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.resetVariables();\n        this.getGoalsFromDatabase();\n    }\n\n    resetVariables() {\n        this.goalModel = new Goal(0, '', true);\n        this.searchTerm = '';\n    }\n\n    private getGoalsFromDatabase() {\n\n        this.loading = true;\r\n        this.spinnerService.updateMessage('Loading Goals.....');\r\n        this.spinnerService.busy();\n        this.goalService.getGoals()\n            .subscribe((response: ApiResponse) => {\n\n                if (response.data != null) {\n                    this.goals = Goal.FormGoalModelArray(response);\n                    this.goalsToDisplay = this.goals.slice();\n                }\n                this.loading = false;\r\n                this.spinnerService.idle();\n            },\n            error => {\n\n                this.loading = false;\r\n                this.spinnerService.idle();\n                console.log('Exception occured while fetching goals from Database');\n            });\n    }\n\n    pageChanged(event: any) {\n        this.currentPage = event.page;\n    }\n\n    addUpdateGoal(goalForm: NgForm) {\n\n        if (goalForm.valid) {\n            if (this.goalModel.goalId != 0) {\n                this.updateGoal(goalForm);\n            }\n            else {\n                this.addGoal(goalForm);\n            }\n        }\n    }\n\n    private updateGoal(goalForm: NgForm) {\n\n        this.spinnerService.updateMessage('Updating Goal.....');\n        this.spinnerService.busy();\n        this.goalService.updateGoal(this.goalModel)\n            .subscribe((response: ApiResponse) => {\n\n                var goal = this.goals.find(r => r.goalId == this.goalModel.goalId);\n                if (null !== goal) {\n                    goal.goalName = this.goalModel.goalName;\n                }\n\n                goalForm.resetForm();\n                this.resetAfterDbOperation();\n                this.goalsToDisplay = this.goals.slice();\n                this.spinnerService.idle();\n                this.toastrNotificationService.success('Goal updated successfully');\n            },\n            error => {\n                this.spinnerService.idle();\n                console.log('Exception occured while updating goal from Database');\n            });\n    }\n\n    private addGoal(goalForm: NgForm) {\n\n        this.spinnerService.updateMessage('Adding Goal.....');\n        this.spinnerService.busy();\n        this.goalService.addGoal(this.goalModel)\n            .subscribe((response: ApiResponse) => {\n\n                var newGoal = new Goal(response.data.goalId, response.data.goalName, true);\n                this.goals.push(newGoal);\n                this.goalsToDisplay = this.goals.slice();\n                this.resetAfterDbOperation();\n                goalForm.resetForm();\n                this.spinnerService.idle();\n                this.toastrNotificationService.success('Goal added successfully');\n            },\n            error => {\n                this.spinnerService.idle();\n                console.log('Exception occured while adding goals to Database');\n           });\n    }\n\n    editGoal(goal: Goal) {\n        this.goalModel = new Goal(goal.goalId, goal.goalName, true);\n    }\n\n    resetGoalSelection(goalForm: NgForm) {\n        this.resetVariables();\n        goalForm.resetForm();\n        this.goalsToDisplay = this.goals.slice();\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\n    }\n\n    private resetAfterDbOperation() {\n        this.resetVariables();\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\n    }\n\n    deleteGoal(goal: Goal) {\n\n        this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n            initialState: {\r\n                promptMessage: 'Are you sure you want to delete this record?',\r\n                callback: (result) => {\r\n                    if (result) {\n\n                        this.spinnerService.updateMessage('Deleting Goal.....');\r\n                        this.spinnerService.busy();\n                        this.goalService.deleteGoal(goal)\n                            .subscribe((response: ApiResponse) => {\n\n                                this.goals = this.goals.filter(r => r.goalId != goal.goalId);\n                                this.goalsToDisplay = this.goals.slice();\n                                this.resetAfterDbOperation();\n                                this.spinnerService.idle();\n                                this.toastrNotificationService.success('Goal deleted successfully');\n                            },\n                            error => {\n                                this.spinnerService.idle();\n                                console.log('Exception occured while deleting goals from Database');\n                            });\n                    }\n                }\n            }\n        });\n    }\n\n    searchGoals() {\n\n        if (this.searchTerm != '' && this.searchTerm != null && this.searchTerm != undefined) {\n            this.goalsToDisplay = this.goals.filter(r => r.goalName.toLocaleLowerCase()\n                                      .indexOf(this.searchTerm.toLocaleLowerCase()) != -1);\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\n        }\n        else {\n            this.goalsToDisplay = this.goals.slice();\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\n        }\n    }\n\n}\n","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-7 offset-2\">\r\n\r\n        <div class=\"title_goal_management\">\r\n            <h3> Goals Management </h3>\r\n        </div>\r\n\r\n        <div *ngIf=\"!loading\">\r\n            <form #goalForm=\"ngForm\" novalidate>\r\n\r\n                <div class=\"input-group col-md-5 goal_search_control\">\r\n                    <input class=\"form-control\" placeholder=\"search\"\r\n                           value=\"search\" name=\"search-input\"\r\n                           [(ngModel)]=\"searchTerm\">\r\n                    <span class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"searchGoals()\">\r\n                            <i class=\"fa fa-search\"></i>\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n\r\n\r\n                <div class=\"row table_container_row\">\r\n                    <div class=\"col-md-12 table_container_column\">\r\n\r\n                        <table name=\"goalsTable\" class=\"table table-bordered table-hover goals_table\" *ngIf=\"goalsToDisplay.length > 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Goal</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let goal of (goalsToDisplay | paginationPipe:currentPage:itemsPerPage)\" class=\"table-style\">\r\n                                    <th scope=\"row\"> {{ goal.goalName }}</th>\r\n                                    <td class=\"goal_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"editGoal(goal)\">\r\n                                            <span class=\"fa fa-pencil-square-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                    <td class=\"goal_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"deleteGoal(goal)\">\r\n                                            <span class=\"fa fa-trash-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table name=\"nogoalsTable\" class=\"table table-bordered table-hover mt-5 goals_table\" *ngIf=\"goalsToDisplay.length == 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Goal</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr class=\"table-style\">\r\n\r\n                                    <td class=\"goal_table_controls\" colspan=\"3\">\r\n                                        No Records Found\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"row\" *ngIf=\"goalsToDisplay.length > 0\">\r\n                    <div class=\"col-xs-12 col-12 pager-div\">\r\n                        <pagination name=\"paginationControl\" (pageChanged)=\"pageChanged($event)\"\r\n                                    [totalItems]=\"goalsToDisplay.length\"\r\n                                    [itemsPerPage]=\"itemsPerPage\"\r\n                                    [maxSize]=\"itemsPerPage\"\r\n                                    [(ngModel)]=\"currentPage\">\r\n\r\n                        </pagination>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-12 col-12\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"goalName\">Add/Update Goal</label>\r\n                            <textarea class=\"form-control\"\r\n                                      name=\"goalName\" placeholder=\"Enter Goal(max number of characters accepted are 500)\"\r\n                                      [(ngModel)]=\"goalModel.goalName\"\r\n                                      #goalName=\"ngModel\"\r\n                                      required\r\n                                      maxlength=\"500\"\r\n                                      rows=\"5\"></textarea>\r\n                            <small id=\"roleHelp\" class=\"form-text text-muted\">Please enter new goal missing in database.</small>\r\n                        </div>\r\n                        <div *ngIf=\"goalName.invalid && (goalName.dirty || goalName.touched)\"\r\n                             class=\"alert alert-danger\">\r\n\r\n                            <div *ngIf=\"goalName.errors.required\">\r\n                                Goal Name is required.\r\n                            </div>\r\n                            <div *ngIf=\"goalName.errors.maxlength\">\r\n                                Goal Name cannot exceeds 500 characters.\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" class=\"btn btn-primary\"\r\n                                (click)=\"addUpdateGoal(goalForm)\"\r\n                                [disabled]=\"goalForm.invalid\">\r\n                            Submit\r\n                        </button>\r\n\r\n                        <button type=\"button\" class=\"btn btn-warning ml-3\"\r\n                                (click)=\"resetGoalSelection(goalForm)\"\r\n                                [disabled]=\"goalForm.invalid\">\r\n                            Reset\r\n                        </button>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n","export class RegistrationRequestModel {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    email: string;\r\n    password: string;\r\n    contactNumber: string;\r\n    roleId: number;\r\n    gender: string;\r\n    departmentId: number;\r\n    reportingManagerId: number;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { UserService } from '../shared/services/user/user-service';\r\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\r\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { Role } from '../shared/models/roles/role';\r\nimport { Department } from '../shared/models/departments/department';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrNotificationService } from '../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../confirm-modal-component/confirm-modal-component';\r\nimport { UserUpdateRequestModel } from '../shared/models/user/user-update-request-model';\r\n\r\n@Component({\r\n    templateUrl: './user-details-component.html',\r\n    styleUrls: [\r\n        './user-details-component.css'\r\n    ]\r\n})\r\nexport class UserDetailsComponent implements OnInit {\r\n\r\n    userDetailFormGroup: FormGroup;\r\n    roles: Array<Role> = Array<Role>();\r\n    departments: Array<Department> = new Array<Department>();\r\n    modalRef: BsModalRef;\r\n\r\n    constructor(private userDetailFormBuilder: FormBuilder,\r\n                private userService: UserService,\r\n                private spinnerService: SpinnerService,\r\n                private router: Router,\r\n                private toastrNotificationService: ToastrNotificationService,\r\n                private modalService: BsModalService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.initializeUserDetailFormGroup();\r\n        this.getUserDetailsScreenData();\r\n    }\r\n\r\n    private initializeUserDetailFormGroup() {\r\n\r\n        this.userDetailFormGroup = this.userDetailFormBuilder.group({\r\n            userId: [''],\r\n            firstName: ['', [Validators.required, Validators.maxLength(100)]],\r\n            lastName: ['', [Validators.required, Validators.maxLength(100)]],\r\n            contactNumber: ['', [Validators.required, Validators.maxLength(10)]],\r\n            gender: ['', [Validators.required]],\r\n            role: ['', [Validators.required]],\r\n            department: ['', [Validators.required]]\r\n        });\r\n\r\n    }\r\n\r\n    private getUserDetailsScreenData() {\r\n\r\n        this.spinnerService.updateMessage('Getting User Details. Please wait.....');\r\n        this.spinnerService.busy();\r\n\r\n        this.userService.getUserDetailScreenData()\r\n            .subscribe((responses: Array<ApiResponse>) => {\r\n\r\n                this.spinnerService.idle();\r\n                console.log(responses)\r\n                this.bindUserDetailsFormGroup(responses);\r\n        },\r\n        error => {\r\n\r\n                this.spinnerService.idle();\r\n                console.log('Error occured while fetching User details screen data');\r\n        })\r\n\r\n    }\r\n\r\n    private bindUserDetailsFormGroup(responses: Array<ApiResponse>) {\r\n\r\n        if (responses[1].data != null) {\r\n            this.roles = Role.FormRolesModelArray(responses[1]);\r\n        }\r\n\r\n        if (responses[2].data != null) {\r\n            this.departments = Department.FormDepartmentModelArray(responses[2]);\r\n        }\r\n\r\n        this.userDetailFormGroup.patchValue({\r\n            userId: responses[0].data.userId,\r\n            firstName: responses[0].data.firstName,\r\n            lastName: responses[0].data.lastName,\r\n            contactNumber: responses[0].data.contactNumber,\r\n            gender: responses[0].data.gender,\r\n            role: (responses[0].data.roleId == 0) ? '' : responses[0].data.roleId,\r\n            department: (responses[0].data.departmentId == 0) ? '' : responses[0].data.departmentId,\r\n        });\r\n\r\n        console.log(this.userDetailFormGroup.value);\r\n    }\r\n\r\n    updateUserDetails() {\r\n\r\n        if (this.userDetailFormGroup.valid) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Continue to update your details?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Updating details. Please wait.....');\r\n                            this.spinnerService.busy();\r\n                            console.log(this.userDetailFormGroup.value);\r\n                            let userUpdateRequestModel: UserUpdateRequestModel = this.mapFormGroupToUserUpdateRequestModel();\r\n                            this.userService.updateUserDetails(userUpdateRequestModel)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    this.userDetailFormGroup.reset();\r\n                                    this.spinnerService.idle();\r\n                                    this.toastrNotificationService.success('User details updated successfully');\r\n                                    this.router.navigate(['/home']);\r\n                                },\r\n                                error => {\r\n                                    this.spinnerService.idle();\r\n                                    console.log('Exception occured while registering updating user details');\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private mapFormGroupToUserUpdateRequestModel(): UserUpdateRequestModel{\r\n        let userUpdateRequestModel: UserUpdateRequestModel = new UserUpdateRequestModel();\r\n        userUpdateRequestModel.userId = this.userDetailFormGroup.value.userId * 1;\r\n        userUpdateRequestModel.firstName = this.userDetailFormGroup.value.firstName;\r\n        userUpdateRequestModel.lastName = this.userDetailFormGroup.value.lastName;\r\n        userUpdateRequestModel.contactNumber = ''+this.userDetailFormGroup.value.contactNumber;\r\n        userUpdateRequestModel.gender = this.userDetailFormGroup.value.gender;\r\n        userUpdateRequestModel.roleId = this.userDetailFormGroup.value.role * 1;\r\n        userUpdateRequestModel.departmentId = this.userDetailFormGroup.value.department * 1;\r\n\r\n        return userUpdateRequestModel;\r\n    }\r\n\r\n    navigateHome() {\r\n\r\n        if (this.userDetailFormGroup.dirty) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Discard changes and navigate back to Home page?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.router.navigate(['/home']);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.router.navigate(['/home']);\r\n        }\r\n    }\r\n}","<div class=\"container-fluid reset-controls-container\">\r\n\r\n    <div class=\"row justify-content-center align-items-center h-100\">\r\n\r\n        <div class=\"col-md-6\">\r\n\r\n            <div class=\"col-md-12\">\r\n\r\n                <div class=\"card\">\r\n                    <div class=\"card-header bg-primary text-white\">\r\n                        Edit User details\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n\r\n                        <form [formGroup]=\"userDetailFormGroup\">\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"firstName\">First Name</label>\r\n\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                       name=\"firstName\" placeholder=\"First Name\"\r\n                                       formControlName=\"firstName\">\r\n\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('firstName').hasError('required')\r\n                                                    && userDetailFormGroup.get('firstName').touched\">* First Name is required</p>\r\n\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('firstName').hasError('maxlength')\r\n                                                    && userDetailFormGroup.get('firstName').touched\">* First Name cannot exceeds 50 characters</p>\r\n\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"lastName\">Last Name</label>\r\n\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                       name=\"lastName\" placeholder=\"Last Name\"\r\n                                       formControlName=\"lastName\">\r\n\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('lastName').hasError('required')\r\n                                                    && userDetailFormGroup.get('lastName').touched\">* Last Name is required</p>\r\n\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('lastName').hasError('maxlength')\r\n                                                    && userDetailFormGroup.get('lastName').touched\">* Last Name cannot exceeds 50 characters</p>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"contactNumber\">Contact Number</label>\r\n                                <input type=\"number\" class=\"form-control\"\r\n                                       name=\"contactNumber\" placeholder=\"Contact Number\"\r\n                                       formControlName=\"contactNumber\">\r\n\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('contactNumber').hasError('required')\r\n                                                    && userDetailFormGroup.get('contactNumber').touched\">* Contact Number is required</p>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <div>\r\n                                    <label for=\"gender\">Gender</label>\r\n                                </div>\r\n\r\n                                <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                                    <label class=\"btn btn-secondary\" [class.active]=\"userDetailFormGroup.get('gender').value == 'M'\">\r\n                                        <input type=\"radio\" formControlName=\"gender\"\r\n                                               id=\"option1\" value=\"M\"\r\n                                               [checked]=\"userDetailFormGroup.get('gender').value == 'M'\"> Male\r\n                                    </label>\r\n                                    <label class=\"btn btn-secondary\" [class.active]=\"userDetailFormGroup.get('gender').value == 'F'\">\r\n                                        <input type=\"radio\" formControlName=\"gender\" id=\"option2\"\r\n                                               value=\"F\"\r\n                                               [checked]=\"userDetailFormGroup.get('gender').value == 'F'\"> Female\r\n                                    </label>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"role\">Role</label>\r\n                                <select id=\"role\" class=\"form-control\" formControlName=\"role\">\r\n                                    <option value=\"\" disabled>Choose...</option>\r\n                                    <option *ngFor=\"let role of roles\" [value]=\"role.roleId\">{{ role.roleName }}</option>\r\n                                </select>\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('role').hasError('required')\r\n                                                    && userDetailFormGroup.get('role').touched\">* Please select Role</p>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"department\">Department</label>\r\n                                <select id=\"department\" class=\"form-control\" formControlName=\"department\">\r\n                                    <option value=\"\" disabled>Choose...</option>\r\n                                    <option *ngFor=\"let department of departments\" [value]=\"department.departmentId\">{{ department.departmentName }}</option>\r\n                                </select>\r\n                                <p class=\"help-block\" *ngIf=\"userDetailFormGroup.get('department').hasError('required')\r\n                                                    && userDetailFormGroup.get('department').touched\">* Please select Department</p>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"card-footer\">\r\n\r\n                        <button type=\"submit\" class=\"btn btn-primary registration_buttons\"\r\n                                [disabled]=\"!userDetailFormGroup.valid\"\r\n                                (click)=\"updateUserDetails()\">\r\n                            Update\r\n                        </button>\r\n\r\n                        <button type=\"submit\" class=\"btn btn-outline-dark ml-3 registration_buttons\"\r\n                                (click)=\"navigateHome()\">\r\n                            Back\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable } from 'rxjs';\r\nimport { Department } from '../../models/departments/department';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DepartmentService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getDepartments(): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>('/api/departments/get_departments', {});\r\n    }\r\n\r\n    updateDepartment(department: Department): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/departments/update_department/${department.departmentId}`, { departmentName: department.departmentName });\r\n    }\r\n\r\n    addDepartment(department: Department): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/departments/add_department`, { departmentName: department.departmentName });\r\n    }\r\n\r\n    deleteDepartment(department: Department): Observable<ApiResponse> {\r\n        return this.http.delete<ApiResponse>(`/api/departments/delete_department/${department.departmentId}`);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable } from 'rxjs';\r\nimport { Role } from '../../models/roles/role';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoleService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getRoles(): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>('/api/roles/get_roles', {});\r\n    }\r\n\r\n    updateRole(role: Role): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/roles/update_role/${role.roleId}`, { roleName: role.roleName });\r\n    }\r\n\r\n    addRole(role: Role): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/roles/add_role`, { roleName: role.roleName });\r\n    }\r\n\r\n    deleteRole(role: Role): Observable<ApiResponse> {\r\n        return this.http.delete<ApiResponse>(`/api/roles/delete_role/${role.roleId}`);\r\n    }\r\n}","export class UserUpdateRequestModel {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    contactNumber: string;\r\n    gender: string;\r\n    roleId: number;\r\n    departmentId: number;\r\n}","import { ApiResponse } from '../api-responses/api-response';\r\n\r\nexport class UserResponseModel {\r\n\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    contactNumber: string;\r\n    gender: string;\r\n    gender_display: string;\r\n    isAdmin: boolean;\r\n    roleId: number;\r\n    roleName: string;\r\n    departmentId: number;\r\n    departmentName: string;\r\n    reportingManagerId: number;\r\n    reportingManager: string;\r\n\r\n    constructor() { }\r\n\r\n    static formUserResponseModel(response: ApiResponse): UserResponseModel {\r\n        let user = new UserResponseModel();\r\n        user.id = response.data.userId;\r\n        user.firstName = response.data.firstName;\r\n        user.lastName = response.data.lastName;\r\n        user.email = response.data.email;\r\n        user.contactNumber = response.data.contactNumber;\r\n        user.gender = response.data.gender;\r\n        user.gender_display = (response.data.gender == 'M') ? 'Male' : 'Female';\r\n        user.isAdmin = response.data.isAdmin;\r\n        user.roleId = response.data.roleId;\r\n        user.roleName = (response.data.roleName == \"\") ? 'N/A' : response.data.roleName;\r\n        user.departmentId = response.data.departmentId;\r\n        user.departmentName = (response.data.departmentName == \"\") ? 'N/A' : response.data.departmentName;\r\n        user.reportingManagerId = response.data.reportingManagerId;\r\n        user.reportingManager = (response.data.reportingManager == \"\") ? 'N/A'\r\n                                                                         : response.data.reportingManager;\r\n\r\n        return user;\r\n    }\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'paginationPipe'\r\n})\r\nexport class PaginationPipePipe implements PipeTransform {\r\n    transform(value: any[], currentPage: number, perpage: number): any {\r\n        let result = value.filter((curr, index) => {\r\n            return index >= (currentPage - 1) * perpage && index < currentPage * perpage\r\n        });\r\n        return result;\r\n    }\r\n}","import { Component, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { SpinnerService } from './shared/services/spinner/spinner-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl:'app-component.html',\n  styles: []\n})\nexport class AppComponent implements OnInit {\n\n    messageToDisplay: string = 'Loading...';\n    constructor(private spinnerService: SpinnerService,\n                private cdRef: ChangeDetectorRef) { }\n\n    ngOnInit() {\n        \r\n        this.spinnerService.messageObservable.subscribe(message => {\r\n            setTimeout(() => {\r\n\r\n                this.messageToDisplay = message;\r\n                this.cdRef.detectChanges();\r\n\r\n            },0);\r\n       });\r\n       \r\n       \r\n    }\n}\n","<ngx-spinner>\r\n    <h3 style=\"color:white\">{{messageToDisplay}}</h3>\r\n</ngx-spinner>\r\n<app-nav-bar></app-nav-bar>\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { DepartmentService } from '../shared/services/departments/departments-service';\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\nimport { Department } from '../shared/models/departments/department';\nimport { NgForm } from '@angular/forms';\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { ToastrNotificationService } from '../shared/services/toastr/toastr-service';\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../confirm-modal-component/confirm-modal-component';\n\n@Component({\n  selector: 'app-departments-component',\n  templateUrl: './departments-component.component.html',\n  styleUrls: ['./departments-component.component.css']\n})\nexport class DepartmentsComponentComponent implements OnInit {\n\n    departments: Array<Department> = new Array<Department>();\n    departmentsToDisplay: Array<Department> = new Array<Department>();\n    currentPage: number = 1;\n    itemsPerPage: number = 5;\n    departmentModel: Department;\n    searchTerm: string;\n    loading: boolean = false;\n    modalRef: BsModalRef;\n\n    constructor(private departmentService: DepartmentService,\n                private spinnerService: SpinnerService,\n                private toastrNotificationService: ToastrNotificationService,\n                private cdRef: ChangeDetectorRef,\n                private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.resetVariables();\n        this.getDepartmentsFromDatabase();\n    }\n\n    resetVariables() {\n        this.departmentModel = new Department(0, '');\n        this.searchTerm = '';\n    }\n\n    private getDepartmentsFromDatabase() {\n\n        this.loading = true;\r\n        this.spinnerService.updateMessage('Loading Departments.....');\r\n        this.spinnerService.busy();\n        this.departmentService.getDepartments()\n            .subscribe((response: ApiResponse) => {\n\n                if (response.data != null) {\n                    this.departments = Department.FormDepartmentModelArray(response);\n                    this.departmentsToDisplay = this.departments.slice();\n                }\n                this.loading = false;\r\n                this.spinnerService.idle();\n            },\n            error => {\n                this.loading = false;\r\n                this.spinnerService.idle();\n                console.log('Exception occured while fetching departments from Database');\n            });\n    }\n\n    pageChanged(event: any) {\n        this.currentPage = event.page;\n    }\n    \n    addUpdateDepartment(departmentForm: NgForm) {\n\n        if (departmentForm.valid) {\n            if (this.departmentModel.departmentId != 0) {\n                this.updateDepartment(departmentForm);\n            }\n            else {\n                this.addDepartment(departmentForm);\n            }\n        }\n    }\n\n    private updateDepartment(departmentForm: NgForm) {\n\n        this.spinnerService.updateMessage('Updating Department.....');\n        this.spinnerService.busy();\n        this.departmentService.updateDepartment(this.departmentModel)\n            .subscribe((response: ApiResponse) => {\n\n                var department = this.departments.find(r => r.departmentId == this.departmentModel.departmentId);\n                if (null !== department) {\n                    department.departmentName = this.departmentModel.departmentName;\n                }\n\n                departmentForm.resetForm();\n                this.resetAfterDbOperation();\n                this.departmentsToDisplay = this.departments.slice();\n                this.spinnerService.idle();\n                this.toastrNotificationService.success('Department updated successfully');\n            },\n            error => {\n                this.spinnerService.idle();\n                console.log('Exception occured while updating department from Database');\n            });\n    }\n\n    private addDepartment(departmentForm: NgForm) {\n\n        this.spinnerService.updateMessage('Adding Department.....');\n        this.spinnerService.busy();\n        this.departmentService.addDepartment(this.departmentModel)\n            .subscribe((response: ApiResponse) => {\n\n                var newDepartment= new Department(response.data.id, response.data.departmentName);\n                this.departments.push(newDepartment);\n                this.departmentsToDisplay = this.departments.slice();\n                this.resetAfterDbOperation();\n                departmentForm.resetForm();\n                this.spinnerService.idle();\n                this.toastrNotificationService.success('Department added successfully');\n            },\n            error => {\n                this.spinnerService.idle();\n                console.log('Exception occured while adding departments to Database');\n            });\n    }\n\n    editDepartment(department: Department) {\n        this.departmentModel = new Department(department.departmentId, department.departmentName);\n    }\n\n    resetDepartmentSelection(departmentForm: NgForm) {\n        this.resetVariables();\n        departmentForm.resetForm();\n        this.departmentsToDisplay = this.departments.slice();\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\n    }\n\n    private resetAfterDbOperation() {\n        this.resetVariables();\n        setTimeout(() => {\r\n            this.currentPage = 1;\r\n        });\r\n        this.cdRef.detectChanges();\n    }\n\n    deleteDepartment(department: Department) {\n\n        this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n            initialState: {\r\n                promptMessage: 'Are you sure you want to delete this record?',\r\n                callback: (result) => {\r\n                    if (result) {\n\n                        this.spinnerService.updateMessage('Deleting Department.....');\r\n                        this.spinnerService.busy();\n                        this.departmentService.deleteDepartment(department)\n                            .subscribe((response: ApiResponse) => {\n\n                                this.departments = this.departments.filter(r => r.departmentId != department.departmentId);\n                                this.departmentsToDisplay = this.departments.slice();\n                                this.resetAfterDbOperation();\n                                this.spinnerService.idle();\n                                this.toastrNotificationService.success('Department deleted successfully');\n                            },\n                            error => {\n                                this.spinnerService.idle();\n                                console.log('Exception occured while deleting departments from Database');\n                            });\n                    }\n                }\n            }\n        });\n    }\n\n    searchDepartment() {\n        if (this.searchTerm != '' && this.searchTerm != null && this.searchTerm != undefined) {\n            this.departmentsToDisplay = this.departments.filter(r => r.departmentName.toLocaleLowerCase()\n                                            .indexOf(this.searchTerm.toLocaleLowerCase()) != -1);\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\n        }\n        else {\n            this.departmentsToDisplay = this.departments.slice();\n            setTimeout(() => {\r\n                this.currentPage = 1;\r\n            });\r\n            this.cdRef.detectChanges();\n        }\n    }\n\n}\n","\r\n<div class=\"row mt-3\">\r\n    <div class=\"col-md-7 offset-2\">\r\n\r\n        <div class=\"title_department_management\">\r\n            <h3> Departments Management </h3>\r\n        </div>\r\n\r\n        <div *ngIf=\"!loading\">\r\n            <form #departmentForm=\"ngForm\" novalidate>\r\n\r\n                <div class=\"input-group col-md-5 department_search_control\">\r\n                    <input class=\"form-control\" placeholder=\"search\"\r\n                           value=\"search\" name=\"search-input\"\r\n                           [(ngModel)]=\"searchTerm\">\r\n                    <span class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"searchDepartment()\">\r\n                            <i class=\"fa fa-search\"></i>\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n\r\n\r\n                <div class=\"row table_container_row\">\r\n                    <div class=\"col-md-12 table_container_column\">\r\n\r\n                        <table name=\"departmentsTable\" class=\"table table-bordered table-hover departments_table\" *ngIf=\"departmentsToDisplay.length > 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let department of (departmentsToDisplay | paginationPipe:currentPage:itemsPerPage)\" class=\"table-style\">\r\n                                    <th scope=\"row\"> {{ department.departmentName }}</th>\r\n                                    <td class=\"department_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"editDepartment(department)\">\r\n                                            <span class=\"fa fa-pencil-square-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                    <td class=\"department_table_controls\">\r\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"deleteDepartment(department)\">\r\n                                            <span class=\"fa fa-trash-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table name=\"nodepartmentsTable\" class=\"table table-bordered table-hover mt-5 departments_table\" *ngIf=\"departmentsToDisplay.length == 0\">\r\n                            <thead class=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\"></th>\r\n                                    <th scope=\"col\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr class=\"table-style\">\r\n\r\n                                    <td class=\"department_table_controls\" colspan=\"3\">\r\n                                        No Records Found\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                     </div>\r\n\r\n                   </div>\r\n\r\n                        <div class=\"row\" *ngIf=\"departmentsToDisplay.length > 0\">\r\n                            <div class=\"col-xs-12 col-12 pager-div\">\r\n                                <pagination name=\"paginationControl\" (pageChanged)=\"pageChanged($event)\"\r\n                                            [totalItems]=\"departmentsToDisplay.length\"\r\n                                            [itemsPerPage]=\"itemsPerPage\"\r\n                                            [maxSize]=\"itemsPerPage\"\r\n                                            [(ngModel)]=\"currentPage\">\r\n\r\n                                </pagination>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xs-12 col-12\">\r\n\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"departmentName\">Department Name</label>\r\n                                    <input type=\"text\" class=\"form-control\"\r\n                                           name=\"departmentName\" placeholder=\"Department Name\"\r\n                                           [(ngModel)]=\"departmentModel.departmentName\"\r\n                                           #departmentName=\"ngModel\"\r\n                                           required\r\n                                           maxlength=\"50\">\r\n                                    <small id=\"roleHelp\" class=\"form-text text-muted\">Please enter new department missing in database.</small>\r\n                                </div>\r\n                                <div *ngIf=\"departmentName.invalid && (departmentName.dirty || departmentName.touched)\"\r\n                                     class=\"alert alert-danger\">\r\n\r\n                                    <div *ngIf=\"departmentName.errors.required\">\r\n                                        Department Name is required.\r\n                                    </div>\r\n                                    <div *ngIf=\"departmentName.errors.maxlength\">\r\n                                        Department Name cannot exceeds 50 characters.\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <button type=\"submit\" class=\"btn btn-primary\"\r\n                                        (click)=\"addUpdateDepartment(departmentForm)\"\r\n                                        [disabled]=\"departmentForm.invalid\">\r\n                                    Submit\r\n                                </button>\r\n\r\n                                <button type=\"submit\" class=\"btn btn-warning ml-3\"\r\n                                        (click)=\"resetDepartmentSelection(departmentForm)\"\r\n                                        [disabled]=\"departmentForm.invalid\">\r\n                                    Reset\r\n                                </button>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n            </form>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable } from 'rxjs';\r\nimport { Goal } from '../../models/goals/goal';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GoalsService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getGoals(): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>('/api/goals/get_goals', {});\r\n    }\r\n\r\n    updateGoal(goal: Goal): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/goals/update_goal/${goal.goalId}`, { goalName: goal.goalName });\r\n    }\r\n\r\n    addGoal(goal: Goal): Observable<ApiResponse> {\r\n        return this.http.post<ApiResponse>(`/api/goals/add_goal`, { goalName: goal.goalName });\r\n    }\r\n\r\n    deleteGoal(goal: Goal): Observable<ApiResponse> {\r\n        return this.http.delete<ApiResponse>(`/api/goals/delete_goal/${goal.goalId}`);\r\n    }\r\n}","export const Constant = {\r\n    JWT_TOKEN_KEY: 'user_jwt_token',\r\n    ACTIVE_ITERATION: 'ACTIVE',\r\n    NOTACTIVE: 'NOT ACTIVE',\r\n    DELETED: 'DELETED',\r\n    LOCKED:'LOCKED'\r\n}","export class ReportingManagerRequest {\r\n    reportedUserId: number;\r\n    currentReportingManagerId: number;\r\n    newReportingManagerId: number;\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddReportingManagerRequestComponent } from './add-reporting-manager-requests/new-reporting-manager-request-component';\r\nimport { AuthGuardService } from '../shared/guards/check-user-authenticated-guard';\r\nimport { ReportingManagerRequestsComponent } from './view-reporting-manger-requests/reporting-manager-requests-component';\r\n\r\nconst reportingManagerRoutes: Routes = [\r\n    { path: 'reporting-manager-request', component: AddReportingManagerRequestComponent, canActivate: [AuthGuardService] },\r\n    { path: 'view-reporting-manager-request', component: ReportingManagerRequestsComponent, canActivate: [AuthGuardService] },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(reportingManagerRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class ReportingManagerRoutingModule {\r\n\r\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxBootstrapModule } from './ngx-bootstrap-module'\nimport { NgxSpinnerModule } from \"ngx-spinner\";\nimport { ToastrModule } from 'ngx-toastr';\nimport { AppJWTModule } from './shared/jwt/jwt-module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { SharedModule } from './shared/shared-module';\nimport { AccountsModule } from './accounts/accounts-module';\nimport { UserDetailsModule } from './user-details/user-details-module';\nimport { ReportingManagerModule } from './reporting-manager/reporting-request-module';\n\nimport { AppComponent } from './app.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { RolesComponentComponent } from './roles-component/roles-component.component';\nimport { DepartmentsComponentComponent } from './departments-component/departments-component.component';\nimport { GoalsComponentComponent } from './goals/goals-component';\nimport { HomeComponent } from './home/home-component';\nimport { UnAuthorizedComponent } from './unauthorized/unauthorized-component';\nimport { ForbiddenComponent } from './forbidden/forbidden-component';\n\nimport { HttpErrorInterceptor } from './shared/interceptors/error-interceptor';\r\n\n\n@NgModule({\n  declarations: [\n        AppComponent,\n        NavBarComponent,\n        RolesComponentComponent,\n        DepartmentsComponentComponent,\n        GoalsComponentComponent,\n        HomeComponent,\n        UnAuthorizedComponent,\n        ForbiddenComponent\n  ],\n  imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        FormsModule,\n        AppJWTModule,\n        NgxBootstrapModule,\n        NgxSpinnerModule,\n        ToastrModule.forRoot({\n          preventDuplicates: true,\n          positionClass: 'toast-bottom-right',        \n        }),\n        SharedModule,\n        AccountsModule,\n        UserDetailsModule,\n        ReportingManagerModule,\n        AppRoutingModule     \n  ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: HttpErrorInterceptor,\n            multi: true\n        }\n    ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Department {\r\n\r\n    departmentId: number;\r\n    departmentName: string;\r\n\r\n    constructor(departmentId, departmentName) {\r\n        this.departmentId = departmentId;\r\n        this.departmentName = departmentName;\r\n    }\r\n\r\n    static FormDepartmentModelArray(response: any): Array<Department> {\r\n\r\n        var departmentArray: Array<Department> = new Array<Department>();\r\n        for (var data of response.data) {\r\n            var department = new Department(data.id, data.departmentName);\r\n            departmentArray.push(department);\r\n        }\r\n\r\n        return departmentArray;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams  } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { RegistrationRequestModel } from '../../models/accounts/user-registration/registration-request';\r\nimport { LoginRequestModel } from '../../models/accounts/user-login/login-request-model';\r\nimport { Constant } from '../../constant/constants';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { decode } from 'punycode';\r\nimport { PasswordResetRequestModel } from '../../models/accounts/need-help/password-reset/password-reset-request-model';\r\nimport { UpdatePasswordRequestModel } from '../../models/accounts/need-help/update-password/update-password-request-model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    private loggedIn = new BehaviorSubject<boolean>(false);\r\n\r\n    isLoggedInObservable() {\r\n        return this.loggedIn.asObservable();\r\n    }\r\n\r\n    registerUser(registrationRequestModel: RegistrationRequestModel): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/accounts/register',\r\n                                            registrationRequestModel,\r\n                                            httpOptions);\r\n    }\r\n\r\n    loginUser(loginRequestModel: LoginRequestModel): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/accounts/login', loginRequestModel, httpOptions)\r\n                    .pipe(\r\n                        map((response: ApiResponse) => {\r\n\r\n                            this.saveTokenToStorage(response);\r\n                            return response;\r\n                        })\r\n                    );\r\n\r\n    }\r\n\r\n    passwordReset(passwordResetRequestModel: PasswordResetRequestModel ): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/accounts/reset_password_link', passwordResetRequestModel, httpOptions);\r\n    }\r\n\r\n    updatePassword(updatepasswordResetRequestModel: UpdatePasswordRequestModel): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/accounts/update_password', updatepasswordResetRequestModel, httpOptions);\r\n    }\r\n\r\n    private saveTokenToStorage(response: ApiResponse) {\r\n        if (response.data != null) {\r\n            localStorage.setItem(Constant.JWT_TOKEN_KEY, response.data.token);\r\n            this.loggedIn.next(true);\r\n        }\r\n    }\r\n\r\n    removeTokenFromStorage() {\r\n        localStorage.removeItem(Constant.JWT_TOKEN_KEY);\r\n        this.loggedIn.next(false);\r\n    }\r\n\r\n    private getTokenFromStorage() {\r\n        return localStorage.getItem(Constant.JWT_TOKEN_KEY);\r\n    }\r\n\r\n    getUserName() {\r\n\r\n        let token = this.getTokenFromStorage();\r\n        if (token != null) {\r\n            const helper = new JwtHelperService();\r\n            let decodedToken: any = helper.decodeToken(token);\r\n            if (decodedToken != null) {\r\n                this.loggedIn.next(true);\r\n                return decodedToken.UserName;\r\n            }\r\n        }\r\n    }\r\n\r\n    isAuthenticated() {\r\n        let token = this.getTokenFromStorage();\r\n        if (token == null) {\r\n            return false;\r\n        }\r\n\r\n        const helper = new JwtHelperService();\r\n        const decodedToken = helper.decodeToken(token);\r\n        const expirationDate = helper.getTokenExpirationDate(token);\r\n        const isExpired = helper.isTokenExpired(token);\r\n        return !isExpired;\r\n    }\r\n\r\n    isAdminUser() {\r\n\r\n        let token = this.getTokenFromStorage();\r\n        if (token != null) {\r\n            const helper = new JwtHelperService();\r\n            let decodedToken: any = helper.decodeToken(token);\r\n            if (decodedToken != null) {\r\n                this.loggedIn.next(true);\r\n                return (decodedToken.IsAdmin == 'True');\r\n            }\r\n        }\r\n    }\r\n}","import { AbstractControl } from '@angular/forms';\r\n\r\n\r\nexport class PasswordMatchValidation {\r\n\r\n    static matchPassword(c: AbstractControl): { invalidPassword: boolean } | null {\r\n\r\n        if (c.get('password').value !== c.get('confirmPassword').value) {\r\n            return { invalidPassword: true };\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { Component } from '@angular/core'\n@Component({\n\n    templateUrl: './unauthorized-component.html',\n    styleUrls: [\n        './unauthorized-component.css'\n    ]\n\n})\nexport class UnAuthorizedComponent {\n\n}","<div class=\"container\">\n\n    <div id=\"center\">\n        <div style=\"width:250px; text-align:center\">\n            <h1>401 <i class=\"fa fa-exclamation-triangle\"></i></h1>\n        </div>\n        <div>\n            <h1>Unauthorized</h1>\n        </div>\n        <div>\n            Please login to your account\n            <a id=\"btn-sign-up\" [routerLink]=\"['/login']\" class=\"btn btn-outline-danger\">Login </a>\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core'\n@Component({\n\n    templateUrl: './forbidden-component.html',\n    styleUrls: [\n        './forbidden-component.css'\n    ]\n\n})\nexport class ForbiddenComponent {\n\n}","<div class=\"container\">\n\n    <div id=\"center\">\n        <div style=\"width:250px; text-align:center\">\n            <h1>403 <i class=\"fa fa-exclamation-triangle\"></i></h1>\n        </div>\n        <div>\n            <h1>Access Denied</h1>\n        </div>\n        <div>\n            Please login to your account\n            <a id=\"btn-sign-up\" [routerLink]=\"['/login']\" class=\"btn btn-outline-danger\">Login </a>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserDetailsComponent } from './user-details-component';\r\nimport { AuthGuardService } from '../shared/guards/check-user-authenticated-guard';\r\n\r\nconst userDetailsRoutes: Routes = [\r\n    { path: 'user-details', component: UserDetailsComponent, canActivate: [ AuthGuardService ] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(userDetailsRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class UserDetailsRoutingModule {\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ToastrNotificationService {\r\n\r\n    constructor(private toastrService: ToastrService) { }\r\n\r\n    success(message: string) {\r\n        this.toastrService.success(message);\r\n    }\r\n\r\n    failed(message: string) {\r\n        this.toastrService.error(message);\r\n    }\r\n\r\n    warning(message: string) {\r\n        this.toastrService.warning(message);\r\n    }\r\n}","export class ReportingManagerResponseModel {\r\n    reportingManagerRequestId: number;\r\n    reportedUserId: number;\r\n    reportedUserEmail: string;\r\n    currentReportingManagerId: number;\r\n    currentReportingManagerEmail: string;\r\n    newReportingManagerId: number;\r\n    newReportingManagerEmail: string;\r\n    status: boolean;\r\n\r\n    static FormReportingRequestsModelArray(response: any): Array<ReportingManagerResponseModel> {\r\n\r\n        var reportingRequestsArray: Array<ReportingManagerResponseModel> = new Array<ReportingManagerResponseModel>();\r\n        for (var data of response.data) {\r\n\r\n            var reportingRequest = new ReportingManagerResponseModel();\r\n            reportingRequest.reportingManagerRequestId = data.reportingManagerRequestId;\r\n            reportingRequest.reportedUserId = data.reportedUserId;\r\n            reportingRequest.reportedUserEmail = data.reportedUserEmail;\r\n            reportingRequest.currentReportingManagerId = data.currentReportingManagerId;\r\n            reportingRequest.currentReportingManagerEmail = data.currentReportingManagerEmail;\r\n            reportingRequest.newReportingManagerId = data.newReportingManagerId;\r\n            reportingRequest.newReportingManagerEmail = data.newReportingManagerEmail;\r\n            reportingRequest.status = data.status;\r\n\r\n            reportingRequestsArray.push(reportingRequest);\r\n        }\r\n\r\n        return reportingRequestsArray;\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { JwtModule } from \"@auth0/angular-jwt\";\r\nimport { Constant } from '../constant/constants';\r\n\r\nexport function tokenGetter() {\r\n    return localStorage.getItem(Constant.JWT_TOKEN_KEY);\r\n}\r\n\r\n@NgModule({\r\n\r\n    imports: [\r\n        JwtModule.forRoot({\r\n            config: {\r\n                tokenGetter: tokenGetter,\r\n                allowedDomains: [\"*\"],\r\n                disallowedRoutes: [],\r\n            },\r\n        }),\r\n    ],\r\n})\r\nexport class AppJWTModule { }","export class Role {\r\n\r\n    roleId: number;\r\n    roleName: string;\r\n\r\n    constructor(roleId, roleName) {\r\n        this.roleId = roleId;\r\n        this.roleName = roleName;\r\n    }\r\n\r\n    static FormRolesModelArray(response: any): Array<Role> {\r\n\r\n        var rolesArray: Array<Role> = new Array<Role>();\r\n        for (var data of response.data) {\r\n            var role = new Role(data.roleId, data.roleName);\r\n            rolesArray.push(role);\r\n        }\r\n\r\n        return rolesArray;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { LoginRequestModel } from '../../shared/models/accounts/user-login/login-request-model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AccountService } from '../../shared/services/accounts/accounts-service';\r\nimport { SpinnerService } from '../../shared/services/spinner/spinner-service';\r\nimport { ApiResponse } from '../../shared/models/api-responses/api-response';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    templateUrl: './user-login-component.html',\r\n    styleUrls: ['./user-login-component.css']\r\n})\r\nexport class UserLoginComponent implements OnInit {\r\n\r\n    loginModel: LoginRequestModel = new LoginRequestModel();\r\n\r\n    constructor(private accountService: AccountService,\r\n                private spinnerService: SpinnerService,\r\n                private router: Router) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.accountService.removeTokenFromStorage();\r\n    }\r\n\r\n    loginUser(loginForm: NgForm) {\r\n        if (loginForm.valid) {\r\n\r\n            this.spinnerService.updateMessage('Processing Login request. Please wait.....');\r\n            this.spinnerService.busy();\r\n            this.accountService.loginUser(this.loginModel)\r\n                .subscribe((response: ApiResponse) => {\r\n\r\n                    this.spinnerService.idle();\r\n                    console.log(response);\r\n                    if (response.data != null) {\r\n                        this.router.navigate(['/home']);\r\n                    }\r\n\r\n                },\r\n                error => {\r\n                    this.spinnerService.idle();\r\n                    console.log('Exception occured while processing login request');\r\n               });\r\n        }\r\n    }\r\n}","<div class=\"container-fluid h-100\"> \r\n    <div class=\"row h-100 login-container-row\">\r\n        <div class=\"col-md-7 offset-3\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-10 mt-3 login-controls\">\r\n\r\n                    <div class=\"container h-100\">\r\n                        <div class=\"d-flex justify-content-center h-100\">\r\n                            <div class=\"user_card\">\r\n\r\n                                <div class=\"d-flex justify-content-center form_container\">\r\n                                    <form class=\"login_form\" #loginForm=\"ngForm\">\r\n                                        <div class=\"row login_controls_container\">\r\n                                            <div class=\"col-md-12\">\r\n\r\n                                                <div class=\"input-group\">\r\n                                                    <div class=\"input-group-append\">\r\n                                                        <span class=\"input-group-text\"><i class=\"fa fa-user\"></i></span>\r\n                                                    </div>\r\n                                                    <input type=\"text\" name=\"userName\" class=\"form-control input_user\"\r\n                                                           placeholder=\"username\" required\r\n                                                           [(ngModel)]=\"loginModel.userName\"\r\n                                                           #userName=\"ngModel\">\r\n                                                </div>\r\n                                                <small class=\"form-text text-muted email_descriptor\">Please enter your email as user name.</small>\r\n\r\n                                                <div class=\"input-group mb-2\">\r\n                                                    <div class=\"input-group-append\">\r\n                                                        <span class=\"input-group-text\"><i class=\"fa fa-key\"></i></span>\r\n                                                    </div>\r\n                                                    <input type=\"password\" name=\"password\" class=\"form-control input_pass\"\r\n                                                           placeholder=\"password\" required\r\n                                                           [(ngModel)]=\"loginModel.password\"\r\n                                                           #passwordControl=\"ngModel\">\r\n                                                </div>\r\n\r\n                                                <div class=\"d-flex justify-content-center mt-3 login_container\">\r\n                                                    <button type=\"submit\" name=\"button\" class=\"btn login_btn\"\r\n                                                            [disabled]=\"!loginForm.valid\"\r\n                                                            (click)=\"loginUser(loginForm)\">\r\n                                                        Login\r\n                                                    </button>\r\n                                                </div>\r\n\r\n                                                <div class=\"mt-4\">\r\n                                                    <div class=\"d-flex justify-content-center links\">\r\n                                                        Don't have an account? <a [routerLink]=\"['/register']\" class=\"ml-2\">Sign Up</a>\r\n                                                    </div>\r\n                                                    <div class=\"d-flex justify-content-center links\">\r\n                                                        <a [routerLink]=\"['/need-help/reset-password']\">Forgot your password?</a>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                            </div>\r\n\r\n\r\n                                        </div>\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col-md-12\">\r\n\r\n                                                <div *ngIf=\"( (userName.errors?.required && (userName.dirty || userName.touched))\r\n                                                    || (passwordControl.errors?.required && (passwordControl.dirty || passwordControl.touched)) )\"\r\n                                                     class=\"alert alert-danger mt-3\">\r\n\r\n                                                    <div *ngIf=\"userName.errors?.required && (userName.dirty || userName.touched)\">\r\n                                                        Username is required.\r\n                                                    </div>\r\n                                                    <div *ngIf=\"passwordControl.errors?.required && (passwordControl.dirty || passwordControl.touched)\">\r\n                                                        Password is required.\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </form>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../shared/services/user/user-service';\r\nimport { SpinnerService } from '../shared/services/spinner/spinner-service';\r\nimport { ApiResponse } from '../shared/models/api-responses/api-response';\r\nimport { UserResponseModel } from '../shared/models/user/user-response-model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n\r\n    templateUrl: './home-component.html',\r\n    styleUrls: ['./home-component.css']\r\n\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n    userModel: UserResponseModel;\r\n    isLoading: boolean = false;\r\n\r\n    constructor(private userService: UserService,\r\n                private spinnerService: SpinnerService,\r\n                private router: Router) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.loadUser();\r\n    }\r\n\r\n    private loadUser() {\r\n\r\n        this.isLoading = true;\r\n        this.spinnerService.updateMessage('Loading User details.....');\r\n        this.spinnerService.busy();\r\n\r\n        this.userService.getUser()\r\n            .subscribe((response: ApiResponse) => {\r\n\r\n                this.isLoading = false;\r\n                this.spinnerService.idle();\r\n                this.userModel = UserResponseModel.formUserResponseModel(response);\r\n                console.log(this.userModel);\r\n            },\r\n            error => {\r\n                this.isLoading = false;\r\n                this.spinnerService.idle();\r\n                console.log('Error occured while fetching user details');\r\n            })\r\n    }\r\n\r\n    navigateEditUserDetailsPage() {\r\n        this.router.navigate(['/user-details']);\r\n    }\r\n}","<div class=\"container-fluid reset-controls-container\" *ngIf=\"!isLoading && userModel\">\r\n    \r\n    <div class=\"row justify-content-center align-items-center h-100\">\r\n       \r\n        <div class=\"col-md-6\">\r\n\r\n            <div class=\"col-md-12\">\r\n\r\n                <div class=\"card\">\r\n                    <div class=\"card-header bg-primary text-white\">\r\n                        Below are your details\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n\r\n                        <form #homeForm=\"ngForm\">\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">First Name</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"firstName\" [ngModel]=\"userModel.firstName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Last Name</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"lastName\" [ngModel]=\"userModel.lastName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Email</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"email\" [ngModel]=\"userModel.email\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Contact Number</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"contactNumber\" [ngModel]=\"userModel.contactNumber\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Gender</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"gender\" [ngModel]=\"userModel.gender_display\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Department</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"departmentName\" [ngModel]=\"userModel.departmentName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Role</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"role\" [ngModel]=\"userModel.roleName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Reporting Manager</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"reportinManager\" [ngModel]=\"userModel.reportingManager\">\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"card-footer\">\r\n                    \r\n                        <button type=\"button\" class=\"btn btn-primary\"\r\n                                (click)=\"navigateEditUserDetailsPage()\">\r\n                            Edit Details\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n             </div>\r\n        \r\n        </div>\r\n    \r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../shared/shared-module';\r\nimport { UserDetailsComponent } from './user-details-component';\r\nimport { UserDetailsRoutingModule } from './user-details-routing-module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        UserDetailsComponent\r\n    ],\r\n    imports: [\r\n        SharedModule,\r\n        UserDetailsRoutingModule\r\n    ]\r\n})\r\nexport class UserDetailsModule {\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n@NgModule({\r\n    imports: [\r\n        PaginationModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        BsDatepickerModule.forRoot()\r\n    ],\r\n    exports: [\r\n        PaginationModule,\r\n        ModalModule,\r\n        BsDatepickerModule\r\n    ]\r\n})\r\nexport class NgxBootstrapModule {\r\n\r\n}","import {\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HttpHandler,\r\n    HttpRequest,\r\n    HttpResponse,\r\n    HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { ToastrNotificationService } from '../services/toastr/toastr-service';\r\nimport { Router } from '@angular/router';\r\nimport { SpinnerService } from '../services/spinner/spinner-service';\r\n\r\n\r\n@Injectable()\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private toastrNotificationService: ToastrNotificationService,\r\n                private router: Router,\r\n                private spinnerService: SpinnerService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request)\r\n            .pipe(\r\n\r\n                catchError((error: HttpErrorResponse) => {\r\n                    let errorMessage = '';\r\n                    let errorObject: any = {};\r\n\r\n                    if (error.status == 401 || error.status == 403) {\r\n\r\n                        this.spinnerService.idle();\r\n                        if (error.status == 401) {\r\n                            this.router.navigate(['/unauthorized']);\r\n                        }\r\n                        else {\r\n                            this.router.navigate(['/forbidden']);\r\n                        }\r\n\r\n                        return of(null);\r\n                    }\r\n                    else {\r\n\r\n                        if (error.status == 400) {\r\n                            if (error.error.errors != null) {\r\n                                errorObject.modelStateValidationErros = error.error.errors;\r\n                            }\r\n                        }\r\n\r\n                        errorMessage = error.error.errorMessage ?? 'Exception occured while processing request';\r\n                        errorObject.errorMessage = errorMessage;\r\n                        this.toastrNotificationService.failed(errorMessage);\r\n                        return throwError(errorObject);\r\n                    }\r\n                })\r\n            )\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../shared/shared-module';\r\nimport { AddReportingManagerRequestComponent } from './add-reporting-manager-requests/new-reporting-manager-request-component';\r\nimport { ReportingManagerRoutingModule } from './reporting-request-routing-module';\r\nimport { ReportingManagerRequestsComponent } from './view-reporting-manger-requests/reporting-manager-requests-component';\r\nimport { NgxBootstrapModule } from '../ngx-bootstrap-module'\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddReportingManagerRequestComponent,\r\n        ReportingManagerRequestsComponent\r\n    ],\r\n    imports: [\r\n\r\n        SharedModule,\r\n        NgxBootstrapModule,\r\n        ReportingManagerRoutingModule\r\n    ]\r\n})\r\nexport class ReportingManagerModule {\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RolesComponentComponent } from './roles-component/roles-component.component'\nimport { DepartmentsComponentComponent } from './departments-component/departments-component.component';\r\nimport { GoalsComponentComponent } from './goals/goals-component';\r\nimport { HomeComponent } from './home/home-component';\r\nimport { UnAuthorizedComponent } from './unauthorized/unauthorized-component';\r\nimport { ForbiddenComponent } from './forbidden/forbidden-component';\r\nimport { AuthGuardService } from './shared/guards/check-user-authenticated-guard';\r\n\nconst routes: Routes = [\n\n    { path: 'roles', component: RolesComponentComponent, canActivate: [AuthGuardService]  },\n    { path: 'departments', component: DepartmentsComponentComponent, canActivate: [AuthGuardService] },\n    { path: 'goals', component: GoalsComponentComponent, canActivate: [AuthGuardService] },\n    { path: 'home', component: HomeComponent, canActivate: [AuthGuardService]  },\n    { path: 'need-help', loadChildren: () => import('./accounts/need-help/need-help-module').then(m => m.NeedHelpModule) },\n    { path: 'iterations', loadChildren: () => import('./iteration/iteration-module').then(m => m.IterationModule) },\n    { path: 'unauthorized', component: UnAuthorizedComponent },\n    { path: 'forbidden', component: ForbiddenComponent  },\n    { path: '', redirectTo: 'login', pathMatch:'full' },\n    { path: '**', redirectTo: 'login' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { UserService } from '../../shared/services/user/user-service';\r\nimport { ApiResponse } from '../../shared/models/api-responses/api-response';\r\nimport { SpinnerService } from '../../shared/services/spinner/spinner-service';\r\nimport { RegisteredUsers } from '../../shared/models/user/registered-users';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrNotificationService } from '../../shared/services/toastr/toastr-service';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\nimport { ConfirmModalComponent } from '../../confirm-modal-component/confirm-modal-component';\r\nimport { UserResponseModel } from '../../shared/models/user/user-response-model';\r\nimport { ReportingManagerRequest } from '../../shared/models/user/reporting-manager-request-model';\r\n\r\n@Component({\r\n    templateUrl: './new-reporting-manager-request.html',\r\n    styleUrls: ['./new-reporting-manager-request.css']\r\n})\r\nexport class AddReportingManagerRequestComponent implements OnInit {\r\n\r\n    reportingManagerRequestFormGroup: FormGroup;\r\n    modalRef: BsModalRef;\r\n    users: Array<RegisteredUsers> = new Array<RegisteredUsers>();\r\n\r\n    constructor(private reportingManagerFormBuilder: FormBuilder,\r\n                private userService: UserService,\r\n                private spinnerService: SpinnerService,\r\n                private router: Router,\r\n                private toastrNotificationService: ToastrNotificationService,\r\n                private modalService: BsModalService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.initializeReportingManagerRequestFormGroup();\r\n        this.getUserDetailsScreenData();\r\n    }\r\n\r\n    private initializeReportingManagerRequestFormGroup() {\r\n\r\n        this.reportingManagerRequestFormGroup = this.reportingManagerFormBuilder.group({\r\n            userId: [''],\r\n            firstName: [''],\r\n            lastName: [''],\r\n            contactNumber: [''],\r\n            email: [''],\r\n            role: [''],\r\n            department: [''],\r\n            currentReportingManagerId: [''],\r\n            currentReportingManager: [''],\r\n            newReportingManagerId:['', [Validators.required]]\r\n        });\r\n    }\r\n\r\n    private getUserDetailsScreenData() {\r\n\r\n        this.spinnerService.updateMessage('Getting User Details. Please wait.....');\r\n        this.spinnerService.busy();\r\n\r\n        this.userService.getNewRortingManagerRequestScreenData()\r\n            .subscribe((responses: Array<ApiResponse>) => {\r\n\r\n                this.spinnerService.idle();\r\n                this.bindReportingManagerFormGroup(responses);\r\n            },\r\n            error => {\r\n\r\n                this.spinnerService.idle();\r\n                console.log('Error occured while fetching User details screen data');\r\n           })\r\n    }\r\n\r\n    private bindReportingManagerFormGroup(responses) {\r\n\r\n        \r\n        let userModel = UserResponseModel.formUserResponseModel(responses[0]);\r\n\r\n        this.reportingManagerRequestFormGroup.patchValue({\r\n            userId: userModel.id,\r\n            firstName: userModel.firstName,\r\n            lastName: userModel.lastName,\r\n            contactNumber: userModel.contactNumber,\r\n            email: userModel.email,\r\n            role: (userModel.roleName == \"\") ? 'N/A' : userModel.roleName,\r\n            department: (userModel.departmentName == \"\") ? 'N/A' : userModel.departmentName,\r\n            currentReportingManagerId: userModel.reportingManagerId,\r\n            currentReportingManager: userModel.reportingManager\r\n        });\r\n\r\n    \r\n        this.users = RegisteredUsers.FormRegisterUsersModelArray(responses[1]);\r\n    \r\n    }\r\n\r\n    navigateHome() {\r\n\r\n        if (this.reportingManagerRequestFormGroup.dirty) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Discard changes and navigate back to Home page?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.router.navigate(['/home']);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.router.navigate(['/home']);\r\n        }\r\n    }\r\n\r\n    submitReportingManagerRequest() {\r\n\r\n        if (this.reportingManagerRequestFormGroup.valid && this.checkManagerValid()) {\r\n\r\n            this.modalRef = this.modalService.show(ConfirmModalComponent, {\r\n                initialState: {\r\n                    promptMessage: 'Continue to submit new reporting manager request?',\r\n                    callback: (result) => {\r\n                        if (result) {\r\n\r\n                            this.spinnerService.updateMessage('Submitting request. Please wait.....');\r\n                            this.spinnerService.busy();\r\n                            let reportingManagerRequestModel: ReportingManagerRequest = this.mapFormGroupToReportingManagerRequestModel();\r\n                            this.userService.submitUserReportingManagerRequest(reportingManagerRequestModel)\r\n                                .subscribe((response: ApiResponse) => {\r\n\r\n                                    this.reportingManagerRequestFormGroup.reset();\r\n                                    this.spinnerService.idle();\r\n                                    this.toastrNotificationService.success('Request submitted successfully');\r\n                                    this.router.navigate(['/home']);\r\n                                },\r\n                                    error => {\r\n                                        this.spinnerService.idle();\r\n                                        console.log('Exception occured while submitting');\r\n                                    });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n        else {\r\n            this.toastrNotificationService.warning('Please check the reporting manager selected');\r\n        }\r\n    }\r\n\r\n    private checkManagerValid(): boolean {\r\n        return this.reportingManagerRequestFormGroup.value.currentReportingManagerId * 1 !=  \r\n            this.reportingManagerRequestFormGroup.value.newReportingManagerId * 1   \r\n    }\r\n\r\n    private mapFormGroupToReportingManagerRequestModel(): ReportingManagerRequest {\r\n        let reportingManagerRequestModel: ReportingManagerRequest = new ReportingManagerRequest();\r\n        reportingManagerRequestModel.reportedUserId = this.reportingManagerRequestFormGroup.value.userId * 1;\r\n        reportingManagerRequestModel.currentReportingManagerId = this.reportingManagerRequestFormGroup.value.currentReportingManagerId * 1;\r\n        reportingManagerRequestModel.newReportingManagerId = this.reportingManagerRequestFormGroup.value.newReportingManagerId * 1;       \r\n\r\n        return reportingManagerRequestModel;\r\n    }\r\n}","<div class=\"container-fluid reset-controls-container\">\r\n\r\n    <div class=\"row justify-content-center align-items-center h-100\">\r\n\r\n        <div class=\"col-md-6\">\r\n\r\n            <div class=\"col-md-12\">\r\n\r\n                <div class=\"card\">\r\n                    <div class=\"card-header bg-primary text-white\">\r\n                        Submit Reporting Manager Request\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n\r\n                        <form [formGroup]=\"reportingManagerRequestFormGroup\">\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">First Name</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"firstName\" formControlName=\"firstName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Last Name</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"lastName\" formControlName=\"lastName\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Email</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"email\" formControlName=\"email\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Contact Number</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"contactNumber\" formControlName=\"contactNumber\">\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Department</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"departmentName\" formControlName=\"department\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Role</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"role\" formControlName=\"role\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\">Reporting Manager</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\"\r\n                                           name=\"reportinManager\" formControlName=\"currentReportingManager\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row control-row\">\r\n                                <label class=\"label_controls col-form-label col-sm-4\" for=\"newManager\">New Manager</label>\r\n                                <div class=\"input_controls col-sm-8\">\r\n                                    <select id=\"newManager\" class=\"form-control\" formControlName=\"newReportingManagerId\">\r\n                                        <option value=\"\" disabled>Choose...</option>\r\n                                        <option *ngFor=\"let user of users\" [value]=\"user.userId\">{{ user.email }}</option>\r\n                                    </select>\r\n\r\n                                    <p class=\"help-block\" *ngIf=\"reportingManagerRequestFormGroup.get('newReportingManagerId').hasError('required')\r\n                                                && reportingManagerRequestFormGroup.get('newReportingManagerId').touched\">* Please select Manager</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"card-footer\">\r\n\r\n                        <button type=\"submit\" class=\"btn btn-primary registration_buttons\"\r\n                                [disabled]=\"!reportingManagerRequestFormGroup.valid\"\r\n                                (click)=\"submitReportingManagerRequest()\">\r\n                            Submit\r\n                        </button>\r\n\r\n                        <button type=\"submit\" class=\"btn btn-outline-dark ml-3 registration_buttons\"\r\n                                (click)=\"navigateHome()\">\r\n                            Back\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { ApiResponse } from '../../models/api-responses/api-response'\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { RoleService } from '../roles/role-service';\r\nimport { DepartmentService } from '../departments/departments-service';\r\nimport { UserUpdateRequestModel } from '../../models/user/user-update-request-model';\r\nimport { ReportingManagerRequest } from '../../models/user/reporting-manager-request-model';\r\nimport { ApproveReportingManagerRequestModel } from '../../models/user/approve-reporting-manager-request-model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getUser(): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/user/get_user', {}, httpOptions);\r\n    }\r\n\r\n    getUserDetailScreenData(): Observable<[ApiResponse, ApiResponse, ApiResponse]> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        var userDetailCall = this.http.post<ApiResponse>('/api/user/get_user', {}, httpOptions);\r\n        var rolesCall = this.http.post<ApiResponse>('/api/roles/get_roles', {});\r\n        var departmentCall = this.http.post<ApiResponse>('/api/departments/get_departments', {});\r\n\r\n        return forkJoin(userDetailCall, rolesCall, departmentCall);\r\n    }\r\n\r\n    updateUserDetails(userUpdateRequestModel: UserUpdateRequestModel): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/user/update_user', userUpdateRequestModel, httpOptions);\r\n    }\r\n\r\n    getNewRortingManagerRequestScreenData(): Observable<[ApiResponse, ApiResponse]> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        var userDetailCall = this.http.post<ApiResponse>('/api/user/get_user', {}, httpOptions);\r\n        var usersCall = this.http.post<ApiResponse>('/api/user/get_registered_users_except_logged_in_user', {});\r\n\r\n        return forkJoin(userDetailCall, usersCall);\r\n    }\r\n\r\n    submitUserReportingManagerRequest(reportingManagerRequestModel: ReportingManagerRequest): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/user/reporting_manager_request', reportingManagerRequestModel, httpOptions);\r\n    }\r\n\r\n    getPendingReportingManagerRequests(): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/user/pending_reporting_manager_requests', {}, httpOptions);\r\n    }\r\n\r\n    approvePendingReportingManagerRequests(request: ApproveReportingManagerRequestModel): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.post<ApiResponse>('/api/user/approve_reporting_manager_request', request, httpOptions);\r\n    }\r\n\r\n    rejectPendingReportingManagerRequests(requestId: number): Observable<ApiResponse> {\r\n\r\n        let headers: HttpHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const httpOptions = {\r\n            headers: headers\r\n        }\r\n\r\n        return this.http.delete<ApiResponse>(`/api/user/reject_reporting_manager_requests/${requestId}`);\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}